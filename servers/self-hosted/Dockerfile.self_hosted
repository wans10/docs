FROM node:20.18-alpine3.20 AS base


# -----------  Start Postgres setup  -----------

RUN apk update && apk add --no-cache postgresql curl


# Set up Postgres data directory and configuration
RUN mkdir -p /var/lib/postgresql/data && \
    mkdir -p /run/postgresql && \
    chown -R postgres:postgres /var/lib/postgresql && \
    chown -R postgres:postgres /run/postgresql

# Switch to postgres user & initialize the database
USER postgres
RUN initdb -D /var/lib/postgresql/data
EXPOSE 5432

# -----------  End Postgres setup  -----------

USER root

# ----------- Start MINIO setup  -----------

RUN wget https://dl.min.io/server/minio/release/linux-amd64/minio && \
    chmod +x minio && \
    mv minio /usr/local/bin/ && \
    addgroup -S minio-user && \
    adduser -S minio-user -G minio-user && \
    mkdir -p /data && \
    chown -R minio-user:minio-user /data && \
    wget https://dl.min.io/client/mc/release/linux-amd64/mc && \
    chmod +x mc && \
    mv mc /usr/local/bin/

ENV MINIO_VOLUMES="/data" \
    MINIO_SERVER_URL="http://localhost:9000" \
    MINIO_ROOT_USER="minioadmin" \
    MINIO_ROOT_PASSWORD="minioadmin"

# ----------- End MINIO setup  -----------

# ----------- Setup FDR  -----------
FROM base AS builder
RUN apk add --no-cache libc6-compat && \
    apk update

# Produce a pruned version of the monorepo
WORKDIR /app
RUN npm install -g turbo@2.0.1
COPY . .
RUN turbo prune @fern-platform/fdr @fern-docs/bundle @fern-docs/edge-config --docker

# Add lockfile and package.json's
FROM base AS installer
RUN apk add --no-cache libc6-compat unzip bash && \
    apk update && \
    npm install -g pnpm@v9.4.0

WORKDIR /app

# Only copy the necessary files for dependency installation first
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml .
RUN pnpm install

# Copy the rest of the files
COPY --from=builder /app/out/full/ .
COPY turbo.json turbo.json
COPY shared shared
COPY fern fern
COPY docs_bundle.tar.gz .


RUN pnpm turbo --filter=@fern-api/fdr-sdk compile && \
    pnpm turbo --filter=@fern-platform/fdr codegen && \
    pnpm turbo --filter=@fern-platform/fdr compile

# Final stage
FROM base AS runner
WORKDIR /app

RUN wget https://dl.min.io/client/mc/release/linux-amd64/mc && \
    chmod +x mc && \
    mv mc /usr/local/bin/ && \
    apk add --no-cache jq && \
    npm install -g prisma fern-api@latest pnpm

RUN fern upgrade

# Copy the built FDR application
COPY --from=installer /app .

# Copy both FDR and self-hosted directories
COPY servers/fdr /app/servers/fdr
COPY servers/self-hosted /app/servers/self-hosted

COPY servers/self-hosted/.env /app/servers/self-hosted/.env
COPY --from=installer /app/servers/fdr/prisma/schema.prisma /app/servers/fdr/prisma/schema.prisma

# Copy and extract the docs bundle

# Setup Nextapp dependencies
COPY --from=installer /app/docs_bundle.tar.gz /app/self-hosted.tar.gz
RUN mkdir -p /app/nextapp && \
    tar -xzf /app/self-hosted.tar.gz -C /app/nextapp && \
    cd /app/nextapp && \
    pnpm add esbuild

# ------------ End FDR setup ------------

ENTRYPOINT ["/bin/sh", "/app/servers/self-hosted/scripts/run_self_hosted.sh"]
