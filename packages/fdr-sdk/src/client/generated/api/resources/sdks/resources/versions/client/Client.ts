/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as FernRegistry from "../../../../../index";
import urlJoin from "url-join";

export declare namespace Versions {
    export interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Versions {
    constructor(protected readonly _options: Versions.Options = {}) {}

    /**
     * Computes a semantic version for the SDK to be relesed on.
     * The endpoint tries to find existing versions by looking up against
     * registries and github repositories. If none are found an error is thrown.
     * If a version is found, a new semantic version is returned.
     *
     * @param {FernRegistry.sdks.ComputeSemanticVersionRequest} request
     * @param {Versions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sdks.versions.computeSemanticVersion({
     *         package: "package",
     *         language: "Go",
     *         githubRepository: undefined
     *     })
     */
    public computeSemanticVersion(
        request: FernRegistry.sdks.ComputeSemanticVersionRequest,
        requestOptions?: Versions.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            FernRegistry.sdks.ComputedSemanticVersionResponse,
            FernRegistry.sdks.versions.computeSemanticVersion.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__computeSemanticVersion(request, requestOptions));
    }

    private async __computeSemanticVersion(
        request: FernRegistry.sdks.ComputeSemanticVersionRequest,
        requestOptions?: Versions.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.sdks.ComputedSemanticVersionResponse,
                FernRegistry.sdks.versions.computeSemanticVersion.Error
            >
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/sdks/semantic-version/compute",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.sdks.ComputedSemanticVersionResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.sdks.versions.computeSemanticVersion.Error)?.error) {
                case "FailedToComputeExistingVersion":
                case "FailedToIncrementVersion":
                    return {
                        data: {
                            ok: false,
                            error: _response.error.body as FernRegistry.sdks.versions.computeSemanticVersion.Error,
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.sdks.versions.computeSemanticVersion.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
