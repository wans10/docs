/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as FernRegistry from "../../../../../../../index";
import urlJoin from "url-join";

export declare namespace Read {
    export interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Read {
    constructor(protected readonly _options: Read.Options = {}) {}

    /**
     * @param {FernRegistry.docs.v2.read.GetOrganizationForUrlRequest} request
     * @param {Read.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v2.read.getOrganizationForUrl({
     *         url: FernRegistry.Url("url")
     *     })
     */
    public getOrganizationForUrl(
        request: FernRegistry.docs.v2.read.GetOrganizationForUrlRequest,
        requestOptions?: Read.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<FernRegistry.OrgId, FernRegistry.docs.v2.read.getOrganizationForUrl.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__getOrganizationForUrl(request, requestOptions));
    }

    private async __getOrganizationForUrl(
        request: FernRegistry.docs.v2.read.GetOrganizationForUrlRequest,
        requestOptions?: Read.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<FernRegistry.OrgId, FernRegistry.docs.v2.read.getOrganizationForUrl.Error>
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/v2/registry/docs/organization-for-url",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.OrgId,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v2.read.getOrganizationForUrl.Error)?.error) {
                case "DomainNotRegisteredError":
                    return {
                        data: {
                            ok: false,
                            error: _response.error.body as FernRegistry.docs.v2.read.getOrganizationForUrl.Error,
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.docs.v2.read.getOrganizationForUrl.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {FernRegistry.docs.v2.read.GetMetadataForUrlRequest} request
     * @param {Read.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v2.read.getDocsUrlMetadata({
     *         url: FernRegistry.Url("url")
     *     })
     */
    public getDocsUrlMetadata(
        request: FernRegistry.docs.v2.read.GetMetadataForUrlRequest,
        requestOptions?: Read.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<FernRegistry.docs.v2.read.DocsUrlMetadata, FernRegistry.docs.v2.read.getDocsUrlMetadata.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__getDocsUrlMetadata(request, requestOptions));
    }

    private async __getDocsUrlMetadata(
        request: FernRegistry.docs.v2.read.GetMetadataForUrlRequest,
        requestOptions?: Read.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.docs.v2.read.DocsUrlMetadata,
                FernRegistry.docs.v2.read.getDocsUrlMetadata.Error
            >
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/v2/registry/docs/metadata-for-url",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.docs.v2.read.DocsUrlMetadata,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v2.read.getDocsUrlMetadata.Error)?.error) {
                case "DomainNotRegisteredError":
                    return {
                        data: {
                            ok: false,
                            error: _response.error.body as FernRegistry.docs.v2.read.getDocsUrlMetadata.Error,
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.docs.v2.read.getDocsUrlMetadata.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {FernRegistry.docs.v2.read.LoadDocsForUrlRequest} request
     * @param {Read.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v2.read.getDocsForUrl({
     *         url: FernRegistry.Url("url")
     *     })
     */
    public getDocsForUrl(
        request: FernRegistry.docs.v2.read.LoadDocsForUrlRequest,
        requestOptions?: Read.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            FernRegistry.docs.v2.read.LoadDocsForUrlResponse,
            FernRegistry.docs.v2.read.getDocsForUrl.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getDocsForUrl(request, requestOptions));
    }

    private async __getDocsForUrl(
        request: FernRegistry.docs.v2.read.LoadDocsForUrlRequest,
        requestOptions?: Read.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.docs.v2.read.LoadDocsForUrlResponse,
                FernRegistry.docs.v2.read.getDocsForUrl.Error
            >
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/v2/registry/docs/load-with-url",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.docs.v2.read.LoadDocsForUrlResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v2.read.getDocsForUrl.Error)?.error) {
                case "DomainNotRegisteredError":
                case "UnauthorizedError":
                    return {
                        data: {
                            ok: false,
                            error: _response.error.body as FernRegistry.docs.v2.read.getDocsForUrl.Error,
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.docs.v2.read.getDocsForUrl.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {FernRegistry.docs.v2.read.LoadPrivateDocsForUrlRequest} request
     * @param {Read.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v2.read.getPrivateDocsForUrl({
     *         url: FernRegistry.Url("url")
     *     })
     */
    public getPrivateDocsForUrl(
        request: FernRegistry.docs.v2.read.LoadPrivateDocsForUrlRequest,
        requestOptions?: Read.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            FernRegistry.docs.v2.read.LoadDocsForUrlResponse,
            FernRegistry.docs.v2.read.getPrivateDocsForUrl.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getPrivateDocsForUrl(request, requestOptions));
    }

    private async __getPrivateDocsForUrl(
        request: FernRegistry.docs.v2.read.LoadPrivateDocsForUrlRequest,
        requestOptions?: Read.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.docs.v2.read.LoadDocsForUrlResponse,
                FernRegistry.docs.v2.read.getPrivateDocsForUrl.Error
            >
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/v2/registry/docs/private/load-with-url",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.docs.v2.read.LoadDocsForUrlResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v2.read.getPrivateDocsForUrl.Error)?.error) {
                case "DomainNotRegisteredError":
                case "UnauthorizedError":
                    return {
                        data: {
                            ok: false,
                            error: _response.error.body as FernRegistry.docs.v2.read.getPrivateDocsForUrl.Error,
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.docs.v2.read.getPrivateDocsForUrl.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Returns a list of all public docs.
     *
     * @param {FernRegistry.docs.v2.read.ListAllDocsUrlsRequest} request
     * @param {Read.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v2.read.listAllDocsUrls()
     */
    public listAllDocsUrls(
        request: FernRegistry.docs.v2.read.ListAllDocsUrlsRequest = {},
        requestOptions?: Read.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            FernRegistry.docs.v2.read.ListAllDocsUrlsResponse,
            FernRegistry.docs.v2.read.listAllDocsUrls.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__listAllDocsUrls(request, requestOptions));
    }

    private async __listAllDocsUrls(
        request: FernRegistry.docs.v2.read.ListAllDocsUrlsRequest = {},
        requestOptions?: Read.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.docs.v2.read.ListAllDocsUrlsResponse,
                FernRegistry.docs.v2.read.listAllDocsUrls.Error
            >
        >
    > {
        const { page, limit, custom } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (custom != null) {
            _queryParams["custom"] = custom.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/v2/registry/docs/urls/list",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.docs.v2.read.ListAllDocsUrlsResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v2.read.listAllDocsUrls.Error)?.error) {
                case "UnauthorizedError":
                    return {
                        data: {
                            ok: false,
                            error: _response.error.body as FernRegistry.docs.v2.read.listAllDocsUrls.Error,
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.docs.v2.read.listAllDocsUrls.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Loads the Docs Config and any referenced APIs by ID.
     *
     * @param {FernRegistry.DocsConfigId} docsConfigId
     * @param {Read.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v2.read.getDocsConfigById(FernRegistry.DocsConfigId("docsConfigId"))
     */
    public getDocsConfigById(
        docsConfigId: FernRegistry.DocsConfigId,
        requestOptions?: Read.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            FernRegistry.docs.v2.read.GetDocsConfigByIdResponse,
            FernRegistry.docs.v2.read.getDocsConfigById.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getDocsConfigById(docsConfigId, requestOptions));
    }

    private async __getDocsConfigById(
        docsConfigId: FernRegistry.DocsConfigId,
        requestOptions?: Read.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.docs.v2.read.GetDocsConfigByIdResponse,
                FernRegistry.docs.v2.read.getDocsConfigById.Error
            >
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                `/v2/registry/docs/${encodeURIComponent(docsConfigId)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.docs.v2.read.GetDocsConfigByIdResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v2.read.getDocsConfigById.Error)?.error) {
                case "DocsDefinitionNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: _response.error.body as FernRegistry.docs.v2.read.getDocsConfigById.Error,
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.docs.v2.read.getDocsConfigById.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Prepopulates the FDR read S3 bucket with docs definitions
     *
     * @param {Read.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v2.read.prepopulateFdrReadS3Bucket()
     */
    public prepopulateFdrReadS3Bucket(
        requestOptions?: Read.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, FernRegistry.docs.v2.read.prepopulateFdrReadS3Bucket.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__prepopulateFdrReadS3Bucket(requestOptions));
    }

    private async __prepopulateFdrReadS3Bucket(
        requestOptions?: Read.RequestOptions,
    ): Promise<
        core.WithRawResponse<core.APIResponse<void, FernRegistry.docs.v2.read.prepopulateFdrReadS3Bucket.Error>>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/v2/registry/docs/prepopulate-s3-bucket",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.docs.v2.read.prepopulateFdrReadS3Bucket.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
