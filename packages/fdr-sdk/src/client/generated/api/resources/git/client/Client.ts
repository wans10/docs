/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as FernRegistry from "../../../index";
import urlJoin from "url-join";

export declare namespace Git {
    export interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Produces an internal schema to easily track and view pull requests across Fern-managed repositories. This API is named `git` to allow for flexibility in adding other git providers down the line (e.g. gitlab).
 */
export class Git {
    constructor(protected readonly _options: Git.Options = {}) {}

    /**
     * Get a repository by its name (mirroring the Github API, this is the main get request).
     *
     * @param {string} repositoryOwner
     * @param {string} repositoryName
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.git.getRepository("repositoryOwner", "repositoryName")
     */
    public getRepository(
        repositoryOwner: string,
        repositoryName: string,
        requestOptions?: Git.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<FernRegistry.FernRepository, FernRegistry.git.getRepository.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__getRepository(repositoryOwner, repositoryName, requestOptions),
        );
    }

    private async __getRepository(
        repositoryOwner: string,
        repositoryName: string,
        requestOptions?: Git.RequestOptions,
    ): Promise<
        core.WithRawResponse<core.APIResponse<FernRegistry.FernRepository, FernRegistry.git.getRepository.Error>>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                `/generators/github/repository/${encodeURIComponent(repositoryOwner)}/${encodeURIComponent(repositoryName)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.FernRepository,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.git.getRepository.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Get all repositories.
     *
     * @param {FernRegistry.ListRepositoriesRequest} request
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.git.listRepositories({
     *         page: undefined,
     *         pageSize: undefined,
     *         organizationId: undefined,
     *         repositoryName: undefined,
     *         repositoryOwner: undefined
     *     })
     */
    public listRepositories(
        request: FernRegistry.ListRepositoriesRequest = {},
        requestOptions?: Git.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<FernRegistry.ListRepositoriesResponse, FernRegistry.git.listRepositories.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__listRepositories(request, requestOptions));
    }

    private async __listRepositories(
        request: FernRegistry.ListRepositoriesRequest = {},
        requestOptions?: Git.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<FernRegistry.ListRepositoriesResponse, FernRegistry.git.listRepositories.Error>
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/generators/github/repository/list",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.ListRepositoriesResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.git.listRepositories.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Update or create the specified repository.
     *
     * @param {FernRegistry.FernRepository} request
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.git.upsertRepository({
     *         type: "sdk",
     *         id: {
     *             type: "github",
     *             id: "id"
     *         },
     *         name: "name",
     *         owner: "owner",
     *         fullName: "fullName",
     *         url: FernRegistry.Url("url"),
     *         repositoryOwnerOrganizationId: FernRegistry.OrgId("repositoryOwnerOrganizationId"),
     *         defaultBranchChecks: [{
     *                 checkId: "checkId",
     *                 repositoryOwner: "repositoryOwner",
     *                 repositoryName: "repositoryName",
     *                 ref: "ref",
     *                 name: "name",
     *                 status: "status",
     *                 conclusion: "conclusion",
     *                 checkRunUrl: "checkRunUrl",
     *                 createdAt: "2024-01-15T09:30:00Z",
     *                 completedAt: undefined,
     *                 rawCheckRun: {
     *                     "key": "value"
     *                 }
     *             }, {
     *                 checkId: "checkId",
     *                 repositoryOwner: "repositoryOwner",
     *                 repositoryName: "repositoryName",
     *                 ref: "ref",
     *                 name: "name",
     *                 status: "status",
     *                 conclusion: "conclusion",
     *                 checkRunUrl: "checkRunUrl",
     *                 createdAt: "2024-01-15T09:30:00Z",
     *                 completedAt: undefined,
     *                 rawCheckRun: {
     *                     "key": "value"
     *                 }
     *             }],
     *         sdkLanguage: "sdkLanguage"
     *     })
     */
    public upsertRepository(
        request: FernRegistry.FernRepository,
        requestOptions?: Git.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, FernRegistry.git.upsertRepository.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__upsertRepository(request, requestOptions));
    }

    private async __upsertRepository(
        request: FernRegistry.FernRepository,
        requestOptions?: Git.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, FernRegistry.git.upsertRepository.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/generators/github/repository/upsert",
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.git.upsertRepository.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Delete specified repository.
     *
     * @param {string} repositoryOwner
     * @param {string} repositoryName
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.git.deleteRepository("repositoryOwner", "repositoryName")
     */
    public deleteRepository(
        repositoryOwner: string,
        repositoryName: string,
        requestOptions?: Git.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, FernRegistry.git.deleteRepository.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__deleteRepository(repositoryOwner, repositoryName, requestOptions),
        );
    }

    private async __deleteRepository(
        repositoryOwner: string,
        repositoryName: string,
        requestOptions?: Git.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, FernRegistry.git.deleteRepository.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                `/generators/github/repository/${encodeURIComponent(repositoryOwner)}/${encodeURIComponent(repositoryName)}/delete`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.git.deleteRepository.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Get a pull request by its ID.
     *
     * @param {string} repositoryOwner
     * @param {string} repositoryName
     * @param {number} pullRequestNumber
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.git.getPullRequest("repositoryOwner", "repositoryName", 1)
     */
    public getPullRequest(
        repositoryOwner: string,
        repositoryName: string,
        pullRequestNumber: number,
        requestOptions?: Git.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<FernRegistry.PullRequest, FernRegistry.git.getPullRequest.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__getPullRequest(repositoryOwner, repositoryName, pullRequestNumber, requestOptions),
        );
    }

    private async __getPullRequest(
        repositoryOwner: string,
        repositoryName: string,
        pullRequestNumber: number,
        requestOptions?: Git.RequestOptions,
    ): Promise<
        core.WithRawResponse<core.APIResponse<FernRegistry.PullRequest, FernRegistry.git.getPullRequest.Error>>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                `/generators/github/pull-request/${encodeURIComponent(repositoryOwner)}/${encodeURIComponent(repositoryName)}/${encodeURIComponent(pullRequestNumber)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.PullRequest,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.git.getPullRequest.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Get all pull requests.
     *
     * @param {FernRegistry.ListPullRequestsRequest} request
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.git.listPullRequests({
     *         page: undefined,
     *         pageSize: undefined,
     *         repositoryName: undefined,
     *         repositoryOwner: undefined,
     *         organizationId: undefined,
     *         state: undefined,
     *         author: undefined
     *     })
     */
    public listPullRequests(
        request: FernRegistry.ListPullRequestsRequest = {},
        requestOptions?: Git.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<FernRegistry.ListPullRequestsResponse, FernRegistry.git.listPullRequests.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__listPullRequests(request, requestOptions));
    }

    private async __listPullRequests(
        request: FernRegistry.ListPullRequestsRequest = {},
        requestOptions?: Git.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<FernRegistry.ListPullRequestsResponse, FernRegistry.git.listPullRequests.Error>
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/generators/github/pull-request/list",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.ListPullRequestsResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.git.listPullRequests.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Update or create the specified pull request.
     *
     * @param {FernRegistry.PullRequest} request
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.git.upsertPullRequest({
     *         pullRequestNumber: 1,
     *         repositoryName: "repositoryName",
     *         repositoryOwner: "repositoryOwner",
     *         author: undefined,
     *         reviewers: [{
     *                 type: "user",
     *                 name: undefined,
     *                 email: undefined,
     *                 username: "username"
     *             }, {
     *                 type: "user",
     *                 name: undefined,
     *                 email: undefined,
     *                 username: "username"
     *             }],
     *         title: "title",
     *         url: FernRegistry.Url("url"),
     *         checks: [{
     *                 checkId: "checkId",
     *                 repositoryOwner: "repositoryOwner",
     *                 repositoryName: "repositoryName",
     *                 ref: "ref",
     *                 name: "name",
     *                 status: "status",
     *                 conclusion: "conclusion",
     *                 checkRunUrl: "checkRunUrl",
     *                 createdAt: "2024-01-15T09:30:00Z",
     *                 completedAt: undefined,
     *                 rawCheckRun: {
     *                     "key": "value"
     *                 }
     *             }, {
     *                 checkId: "checkId",
     *                 repositoryOwner: "repositoryOwner",
     *                 repositoryName: "repositoryName",
     *                 ref: "ref",
     *                 name: "name",
     *                 status: "status",
     *                 conclusion: "conclusion",
     *                 checkRunUrl: "checkRunUrl",
     *                 createdAt: "2024-01-15T09:30:00Z",
     *                 completedAt: undefined,
     *                 rawCheckRun: {
     *                     "key": "value"
     *                 }
     *             }],
     *         state: "open",
     *         createdAt: "2024-01-15T09:30:00Z",
     *         updatedAt: undefined,
     *         mergedAt: undefined,
     *         closedAt: undefined
     *     })
     */
    public upsertPullRequest(
        request: FernRegistry.PullRequest,
        requestOptions?: Git.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, FernRegistry.git.upsertPullRequest.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__upsertPullRequest(request, requestOptions));
    }

    private async __upsertPullRequest(
        request: FernRegistry.PullRequest,
        requestOptions?: Git.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, FernRegistry.git.upsertPullRequest.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/generators/github/pull-request/upsert",
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.git.upsertPullRequest.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Delete specified pull request.
     *
     * @param {string} repositoryOwner
     * @param {string} repositoryName
     * @param {number} pullRequestNumber
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.git.deletePullRequest("repositoryOwner", "repositoryName", 1)
     */
    public deletePullRequest(
        repositoryOwner: string,
        repositoryName: string,
        pullRequestNumber: number,
        requestOptions?: Git.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, FernRegistry.git.deletePullRequest.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__deletePullRequest(repositoryOwner, repositoryName, pullRequestNumber, requestOptions),
        );
    }

    private async __deletePullRequest(
        repositoryOwner: string,
        repositoryName: string,
        pullRequestNumber: number,
        requestOptions?: Git.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, FernRegistry.git.deletePullRequest.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                `/generators/github/pull-request/${encodeURIComponent(repositoryOwner)}/${encodeURIComponent(repositoryName)}/${encodeURIComponent(pullRequestNumber)}/delete`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.git.deletePullRequest.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
