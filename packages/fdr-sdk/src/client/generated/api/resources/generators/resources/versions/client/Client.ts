/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as FernRegistry from "../../../../../index";
import urlJoin from "url-join";

export declare namespace Versions {
    export interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * CRUD API for managing generator versions.
 */
export class Versions {
    constructor(protected readonly _options: Versions.Options = {}) {}

    /**
     * Get the latest generator version that has not been yanked.
     *
     * @param {FernRegistry.generators.GetLatestGeneratorReleaseRequest} request
     * @param {Versions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.versions.getLatestGeneratorRelease({
     *         generator: FernRegistry.generators.GeneratorId("generator"),
     *         cliVersion: undefined,
     *         irVersion: undefined,
     *         generatorMajorVersion: undefined,
     *         releaseTypes: undefined
     *     })
     */
    public getLatestGeneratorRelease(
        request: FernRegistry.generators.GetLatestGeneratorReleaseRequest,
        requestOptions?: Versions.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            FernRegistry.generators.GeneratorRelease,
            FernRegistry.generators.versions.getLatestGeneratorRelease.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getLatestGeneratorRelease(request, requestOptions));
    }

    private async __getLatestGeneratorRelease(
        request: FernRegistry.generators.GetLatestGeneratorReleaseRequest,
        requestOptions?: Versions.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.generators.GeneratorRelease,
                FernRegistry.generators.versions.getLatestGeneratorRelease.Error
            >
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/generators/versions/latest",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.generators.GeneratorRelease,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.generators.versions.getLatestGeneratorRelease.Error)?.error) {
                case "NoValidGeneratorsFoundError":
                    return {
                        data: {
                            ok: false,
                            error: _response.error
                                .body as FernRegistry.generators.versions.getLatestGeneratorRelease.Error,
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.generators.versions.getLatestGeneratorRelease.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Get the changelog for the specified generator upgrade. The response will be a map of the generator version to it's corresponding changelog.
     *
     * @param {FernRegistry.generators.GeneratorId} generator
     * @param {FernRegistry.generators.GetChangelogRequest} request
     * @param {Versions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.versions.getChangelog(FernRegistry.generators.GeneratorId("generator"), {
     *         fromVersion: {
     *             type: "inclusive",
     *             value: "fromVersion"
     *         },
     *         toVersion: {
     *             type: "inclusive",
     *             value: "toVersion"
     *         }
     *     })
     */
    public getChangelog(
        generator: FernRegistry.generators.GeneratorId,
        request: FernRegistry.generators.GetChangelogRequest,
        requestOptions?: Versions.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            FernRegistry.generators.GetChangelogResponse,
            FernRegistry.generators.versions.getChangelog.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getChangelog(generator, request, requestOptions));
    }

    private async __getChangelog(
        generator: FernRegistry.generators.GeneratorId,
        request: FernRegistry.generators.GetChangelogRequest,
        requestOptions?: Versions.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.generators.GetChangelogResponse,
                FernRegistry.generators.versions.getChangelog.Error
            >
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                `/generators/versions/${encodeURIComponent(generator)}/changelog`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.generators.GetChangelogResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.generators.versions.getChangelog.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Update or create the specified generator version.
     *
     * @param {FernRegistry.generators.GeneratorReleaseRequest} request
     * @param {Versions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.versions.upsertGeneratorRelease({
     *         version: "version",
     *         createdAt: undefined,
     *         isYanked: undefined,
     *         changelogEntry: undefined,
     *         generatorId: FernRegistry.generators.GeneratorId("generatorId"),
     *         irVersion: 1,
     *         migration: undefined,
     *         customConfigSchema: undefined,
     *         tags: undefined
     *     })
     */
    public upsertGeneratorRelease(
        request: FernRegistry.generators.GeneratorReleaseRequest,
        requestOptions?: Versions.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, FernRegistry.generators.versions.upsertGeneratorRelease.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__upsertGeneratorRelease(request, requestOptions));
    }

    private async __upsertGeneratorRelease(
        request: FernRegistry.generators.GeneratorReleaseRequest,
        requestOptions?: Versions.RequestOptions,
    ): Promise<
        core.WithRawResponse<core.APIResponse<void, FernRegistry.generators.versions.upsertGeneratorRelease.Error>>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/generators/versions",
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.generators.versions.upsertGeneratorRelease.Error)?.error) {
                case "InvalidVersionError":
                    return {
                        data: {
                            ok: false,
                            error: _response.error
                                .body as FernRegistry.generators.versions.upsertGeneratorRelease.Error,
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.generators.versions.upsertGeneratorRelease.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Get the specified generator version.
     *
     * @param {FernRegistry.generators.GeneratorId} generator
     * @param {string} version
     * @param {Versions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.versions.getGeneratorRelease(FernRegistry.generators.GeneratorId("generator"), "version")
     */
    public getGeneratorRelease(
        generator: FernRegistry.generators.GeneratorId,
        version: string,
        requestOptions?: Versions.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            FernRegistry.generators.GeneratorRelease,
            FernRegistry.generators.versions.getGeneratorRelease.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getGeneratorRelease(generator, version, requestOptions));
    }

    private async __getGeneratorRelease(
        generator: FernRegistry.generators.GeneratorId,
        version: string,
        requestOptions?: Versions.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.generators.GeneratorRelease,
                FernRegistry.generators.versions.getGeneratorRelease.Error
            >
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                `/generators/versions/${encodeURIComponent(generator)}/${encodeURIComponent(version)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.generators.GeneratorRelease,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.generators.versions.getGeneratorRelease.Error)?.error) {
                case "GeneratorVersionNotFoundError":
                    return {
                        data: {
                            ok: false,
                            error: _response.error.body as FernRegistry.generators.versions.getGeneratorRelease.Error,
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.generators.versions.getGeneratorRelease.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Get all generator versions for the specified generator.
     *
     * @param {FernRegistry.generators.GeneratorId} generator
     * @param {FernRegistry.generators.ListGeneratorReleasesRequest} request
     * @param {Versions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.versions.listGeneratorReleases(FernRegistry.generators.GeneratorId("generator"))
     */
    public listGeneratorReleases(
        generator: FernRegistry.generators.GeneratorId,
        request: FernRegistry.generators.ListGeneratorReleasesRequest = {},
        requestOptions?: Versions.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            FernRegistry.generators.ListGeneratorReleasesResponse,
            FernRegistry.generators.versions.listGeneratorReleases.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__listGeneratorReleases(generator, request, requestOptions));
    }

    private async __listGeneratorReleases(
        generator: FernRegistry.generators.GeneratorId,
        request: FernRegistry.generators.ListGeneratorReleasesRequest = {},
        requestOptions?: Versions.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.generators.ListGeneratorReleasesResponse,
                FernRegistry.generators.versions.listGeneratorReleases.Error
            >
        >
    > {
        const { page, pageSize } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (pageSize != null) {
            _queryParams["pageSize"] = pageSize.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                `/generators/versions/${encodeURIComponent(generator)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.generators.ListGeneratorReleasesResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.generators.versions.listGeneratorReleases.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
