/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as FernRegistry from "../../../index";
import urlJoin from "url-join";
import { Cli } from "../resources/cli/client/Client";
import { Versions } from "../resources/versions/client/Client";

export declare namespace Generators {
    export interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * CRUD API for managing the generator entity itself.
 */
export class Generators {
    protected _cli: Cli | undefined;
    protected _versions: Versions | undefined;

    constructor(protected readonly _options: Generators.Options = {}) {}

    public get cli(): Cli {
        return (this._cli ??= new Cli(this._options));
    }

    public get versions(): Versions {
        return (this._versions ??= new Versions(this._options));
    }

    /**
     * Update or create the specified generator.
     *
     * @param {FernRegistry.generators.Generator} request
     * @param {Generators.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.upsertGenerator({
     *         id: FernRegistry.generators.GeneratorId("id"),
     *         displayName: "displayName",
     *         generatorType: {
     *             type: "sdk"
     *         },
     *         generatorLanguage: undefined,
     *         dockerImage: "dockerImage",
     *         scripts: undefined
     *     })
     */
    public upsertGenerator(
        request: FernRegistry.generators.Generator,
        requestOptions?: Generators.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, FernRegistry.generators.upsertGenerator.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__upsertGenerator(request, requestOptions));
    }

    private async __upsertGenerator(
        request: FernRegistry.generators.Generator,
        requestOptions?: Generators.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, FernRegistry.generators.upsertGenerator.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/generators",
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.generators.upsertGenerator.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Get the generator corresponding to the given docker image.
     *
     * @param {FernRegistry.generators.GetGeneratorByImageRequest} request
     * @param {Generators.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.getGeneratorByImage({
     *         dockerImage: "dockerImage"
     *     })
     */
    public getGeneratorByImage(
        request: FernRegistry.generators.GetGeneratorByImageRequest,
        requestOptions?: Generators.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            FernRegistry.generators.Generator | undefined,
            FernRegistry.generators.getGeneratorByImage.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getGeneratorByImage(request, requestOptions));
    }

    private async __getGeneratorByImage(
        request: FernRegistry.generators.GetGeneratorByImageRequest,
        requestOptions?: Generators.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                FernRegistry.generators.Generator | undefined,
                FernRegistry.generators.getGeneratorByImage.Error
            >
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/generators/by-image",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.generators.Generator | undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.generators.getGeneratorByImage.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Get the specified generator.
     *
     * @param {FernRegistry.generators.GeneratorId} generatorId
     * @param {Generators.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.getGenerator(FernRegistry.generators.GeneratorId("generatorId"))
     */
    public getGenerator(
        generatorId: FernRegistry.generators.GeneratorId,
        requestOptions?: Generators.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<FernRegistry.generators.Generator | undefined, FernRegistry.generators.getGenerator.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__getGenerator(generatorId, requestOptions));
    }

    private async __getGenerator(
        generatorId: FernRegistry.generators.GeneratorId,
        requestOptions?: Generators.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<FernRegistry.generators.Generator | undefined, FernRegistry.generators.getGenerator.Error>
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                `/generators/${encodeURIComponent(generatorId)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.generators.Generator | undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.generators.getGenerator.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Get the all generators. This is currently not paginated since the list will be short, but there may in the future be need for pagination.
     *
     * @param {Generators.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.listGenerators()
     */
    public listGenerators(
        requestOptions?: Generators.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<FernRegistry.generators.Generator[], FernRegistry.generators.listGenerators.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__listGenerators(requestOptions));
    }

    private async __listGenerators(
        requestOptions?: Generators.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<FernRegistry.generators.Generator[], FernRegistry.generators.listGenerators.Error>
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FernRegistryEnvironment.Prod,
                "/generators",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as FernRegistry.generators.Generator[],
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: FernRegistry.generators.listGenerators.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
