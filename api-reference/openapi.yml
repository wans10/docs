openapi: 3.1.0
info:
  title: LLMHub API
  description: |
    LLMHub API 允许您与先进的语言模型进行交互，以生成文本、执行指令等。
    此文档详细描述了用于创建流式响应的端点。
  version: v1
servers:
  - url: https://api.llmhub.com.cn/v1
    description: LLMHub 生产服务器

components:
  securitySchemes:
    LLMHubAuth:
      type: http
      scheme: bearer
      bearerFormat: API-KEY
      description: |
        使用您的 LLMHub API 密钥进行认证。
        您需要在 HTTP 请求头中提供一个 `Authorization` 字段，其值为 `Bearer YOUR_API_KEY`。

  schemas:
    CreateResponseRequest:
      type: object
      title: Create Response Request
      description: 创建一个新响应的请求体。
      properties:
        model:
          type: string
          description: 用于生成响应的模型ID。
          example: "gpt-4.1"
        instructions:
          type: string
          description: 对模型的系统级指令，用于指导其行为。
          example: "You are a helpful assistant."
        input:
          type: string
          description: 提供给模型的主要输入内容。
          example: "Hello!"
        stream:
          type: boolean
          description: |
            如果设置为 `true`，API将以 Server-Sent Events (SSE) 的形式流式返回响应。
            如果为 `false` 或未提供，API将在响应完全生成后一次性返回。
          default: false
          example: true
      required:
        - model
        - input

    StreamEvent:
      title: Stream Event
      description: SSE 流中的一个事件数据对象。
      oneOf:
        - $ref: '#/components/schemas/ResponseCreatedEvent'
        - $ref: '#/components/schemas/ResponseInProgressEvent'
        - $ref: '#/components/schemas/ResponseOutputItemAddedEvent'
        - $ref: '#/components/schemas/ResponseContentPartAddedEvent'
        - $ref: '#/components/schemas/ResponseOutputTextDeltaEvent'
        - $ref: '#/components/schemas/ResponseOutputTextDoneEvent'
        - $ref: '#/components/schemas/ResponseContentPartDoneEvent'
        - $ref: '#/components/schemas/ResponseOutputItemDoneEvent'
        - $ref: '#/components/schemas/ResponseCompletedEvent'
      discriminator:
        propertyName: type
        mapping:
          response.created: '#/components/schemas/ResponseCreatedEvent'
          response.in_progress: '#/components/schemas/ResponseInProgressEvent'
          response.output_item.added: '#/components/schemas/ResponseOutputItemAddedEvent'
          response.content_part.added: '#/components/schemas/ResponseContentPartAddedEvent'
          response.output_text.delta: '#/components/schemas/ResponseOutputTextDeltaEvent'
          response.output_text.done: '#/components/schemas/ResponseOutputTextDoneEvent'
          response.content_part.done: '#/components/schemas/ResponseContentPartDoneEvent'
          response.output_item.done: '#/components/schemas/ResponseOutputItemDoneEvent'
          response.completed: '#/components/schemas/ResponseCompletedEvent'

    ResponseObject:
      type: object
      properties:
        id:
          type: string
          example: "resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654"
        object:
          type: string
          enum: [response]
        created_at:
          type: integer
          format: int64
          description: 响应创建的Unix时间戳。
          example: 1741290958
        status:
          type: string
          enum: [in_progress, completed, failed, cancelled]
        output:
          type: array
          items:
            type: object
        usage:
          type: object
          nullable: true
          properties:
            input_tokens:
              type: integer
            output_tokens:
              type: integer
            total_tokens:
              type: integer

    ResponseCreatedEvent:
      type: object
      required: [type, response]
      properties:
        type:
          type: string
          enum: [response.created]
        response:
          $ref: '#/components/schemas/ResponseObject'

    ResponseInProgressEvent:
      type: object
      required: [type, response]
      properties:
        type:
          type: string
          enum: [response.in_progress]
        response:
          $ref: '#/components/schemas/ResponseObject'

    ResponseOutputItemAddedEvent:
      type: object
      properties:
        type: { type: string, enum: [response.output_item.added] }
        output_index: { type: integer }
        item: { type: object }

    ResponseContentPartAddedEvent:
      type: object
      properties:
        type: { type: string, enum: [response.content_part.added] }
        item_id: { type: string }
        output_index: { type: integer }
        content_index: { type: integer }
        part: { type: object }

    ResponseOutputTextDeltaEvent:
      type: object
      properties:
        type: { type: string, enum: [response.output_text.delta] }
        item_id: { type: string }
        output_index: { type: integer }
        content_index: { type: integer }
        delta: { type: string, description: "本次增量传输的文本内容。" }

    ResponseOutputTextDoneEvent:
      type: object
      properties:
        type: { type: string, enum: [response.output_text.done] }
        item_id: { type: string }
        output_index: { type: integer }
        content_index: { type: integer }
        text: { type: string, description: "完整的文本块内容。" }

    ResponseContentPartDoneEvent:
      type: object
      properties:
        type: { type: string, enum: [response.content_part.done] }
        item_id: { type: string }
        output_index: { type: integer }
        content_index: { type: integer }
        part: { type: object }

    ResponseOutputItemDoneEvent:
      type: object
      properties:
        type: { type: string, enum: [response.output_item.done] }
        output_index: { type: integer }
        item: { type: object }

    ResponseCompletedEvent:
      type: object
      required: [type, response]
      properties:
        type:
          type: string
          enum: [response.completed]
        response:
          allOf:
            - $ref: '#/components/schemas/ResponseObject'
            - type: object
              properties:
                status:
                  enum: [completed]
                output:
                  type: array
                  items:
                    type: object
                    properties:
                      id: { type: string }
                      type: { type: string }
                      status: { enum: [completed] }
                      role: { enum: [assistant] }
                      content:
                        type: array
                        items:
                          type: object
                          properties:
                            type: { enum: [output_text] }
                            text: { type: string }
                usage:
                  type: object
                  nullable: false
                  required: [input_tokens, output_tokens, total_tokens]

paths:
  /responses:
    post:
      summary: 创建一个响应
      description: |
        向指定的模型发送输入，以生成一个响应。
        通过设置 `stream: true`，可以接收一个 Server-Sent Events (SSE) 流，
        实时获取响应的生成过程。
      operationId: createResponse
      tags:
        - Responses
      security:
        - LLMHubAuth: []
      requestBody:
        description: 请求参数
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResponseRequest'
      responses:
        '200':
          description: 成功。以 Server-Sent Events (SSE) 流的形式返回响应。
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/StreamEvent'
              example: |
                event: response.created
                data: {"type":"response.created","response":{"id":"resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654","object":"response","created_at":1741290958,"status":"in_progress","error":null,"incomplete_details":null,"instructions":"You are a helpful assistant.","max_output_tokens":null,"model":"gpt-4.1-2025-04-14","output":[],"parallel_tool_calls":true,"previous_response_id":null,"reasoning":{"effort":null,"summary":null},"store":true,"temperature":1.0,"text":{"format":{"type":"text"}},"tool_choice":"auto","tools":[],"top_p":1.0,"truncation":"disabled","usage":null,"user":null,"metadata":{}}}

                event: response.in_progress
                data: {"type":"response.in_progress","response":{"id":"resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654","object":"response","created_at":1741290958,"status":"in_progress","error":null,"incomplete_details":null,"instructions":"You are a helpful assistant.","max_output_tokens":null,"model":"gpt-4.1-2025-04-14","output":[],"parallel_tool_calls":true,"previous_response_id":null,"reasoning":{"effort":null,"summary":null},"store":true,"temperature":1.0,"text":{"format":{"type":"text"}},"tool_choice":"auto","tools":[],"top_p":1.0,"truncation":"disabled","usage":null,"user":null,"metadata":{}}}

                event: response.output_item.added
                data: {"type":"response.output_item.added","output_index":0,"item":{"id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","type":"message","status":"in_progress","role":"assistant","content":[]}}

                event: response.content_part.added
                data: {"type":"response.content_part.added","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"part":{"type":"output_text","text":"","annotations":[]}}

                event: response.output_text.delta
                data: {"type":"response.output_text.delta","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"delta":"Hi"}

                ...

                event: response.output_text.done
                data: {"type":"response.output_text.done","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"text":"Hi there! How can I assist you today?"}

                event: response.content_part.done
                data: {"type":"response.content_part.done","item_id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","output_index":0,"content_index":0,"part":{"type":"output_text","text":"Hi there! How can I assist you today?","annotations":[]}}

                event: response.output_item.done
                data: {"type":"response.output_item.done","output_index":0,"item":{"id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","type":"message","status":"completed","role":"assistant","content":[{"type":"output_text","text":"Hi there! How can I assist you today?","annotations":[]}]}}

                event: response.completed
                data: {"type":"response.completed","response":{"id":"resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654","object":"response","created_at":1741290958,"status":"completed","error":null,"incomplete_details":null,"instructions":"You are a helpful assistant.","max_output_tokens":null,"model":"gpt-4.1-2025-04-14","output":[{"id":"msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654","type":"message","status":"completed","role":"assistant","content":[{"type":"output_text","text":"Hi there! How can I assist you today?","annotations":[]}]}],"parallel_tool_calls":true,"previous_response_id":null,"reasoning":{"effort":null,"summary":null},"store":true,"temperature":1.0,"text":{"format":{"type":"text"}},"tool_choice":"auto","tools":[],"top_p":1.0,"truncation":"disabled","usage":{"input_tokens":37,"output_tokens":11,"output_tokens_details":{"reasoning_tokens":0},"total_tokens":48},"user":null,"metadata":{}}}
        '400':
          description: 错误的请求（例如，无效的参数）。
        '401':
          description: 未经授权（例如，无效的API密钥）。
