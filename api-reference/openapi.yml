openapi: 3.1.0
info:
  title: LLM Hub API
  description: 一个统一的API，用于访问 OpenAI 和 Anthropic (Claude) 的语言模型。
  version: 1.2.0
servers:
  - url: https://api.llmhub.com.cn/v1
    description: LLM Hub 生产服务器
paths:
  /messages:
    post:
      operationId: createMessage
      summary: 创建 Claude 模型消息
      description: 与 Anthropic 的 Claude 模型进行交互，创建一个新的消息。支持文本、多模态（图像）输入、工具使用和流式响应。此端点需要使用 `x-api-key` 和 `anthropic-version` 请求头。
      tags:
        - Messages (Claude)
      security:
        - apiKeyAuth: []
      parameters:
        - name: anthropic-version
          in: header
          required: true
          description: 指定要使用的 Anthropic API 版本。
          schema:
            type: string
          example: '2023-06-01'
      x-codeSamples:
        - lang: cURL
          label: 文本输入示例
          source: |
            curl https://api.llmhub.com.cn/v1/messages \
                 --header "anthropic-version: 2023-06-01" \
                 --header "content-type: application/json" \
                 --header "x-api-key: $NEWAPI_API_KEY" \
                 --data \
            '{
                "model": "claude-3-5-sonnet-20241022",
                "max_tokens": 1024,
                "messages": [
                    {"role": "user", "content": "Hello, world"}
                ]
            }'
        - lang: cURL
          label: 图像输入示例
          source: |
            curl https://api.llmhub.com.cn/v1/messages \
                 --header "anthropic-version: 2023-06-01" \
                 --header "content-type: application/json" \
                 --header "x-api-key: $NEWAPI_API_KEY" \
                 --data \
            '{
                "model": "claude-3-5-sonnet-20241022",
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "image",
                                "source": {
                                    "type": "base64",
                                    "media_type": "image/jpeg",
                                    "data": "/9j/4AAQSkZJRg..."
                                }
                            },
                            {
                                "type": "text",
                                "text": "这张图片里有什么?"
                            }
                        ]
                    }
                ]
            }'
        - lang: cURL
          label: 工具使用示例
          source: |
            curl https://api.llmhub.com.cn/v1/messages \
                 --header "anthropic-version: 2023-06-01" \
                 --header "content-type: application/json" \
                 --header "x-api-key: $NEWAPI_API_KEY" \
                 --data \
            '{
                "model": "claude-3-5-sonnet-20241022",
                "messages": [
                    {
                        "role": "user", 
                        "content": "今天北京的天气怎么样?"
                    }
                ],
                "tools": [
                    {
                        "name": "get_weather",
                        "description": "获取指定位置的当前天气",
                        "input_schema": {
                            "type": "object",
                            "properties": {
                                "location": {
                                    "type": "string",
                                    "description": "城市名称,如:北京"
                                }
                            },
                            "required": ["location"]
                        }
                    }
                ]
            }'
        - lang: cURL
          label: 流式响应示例
          source: |
            curl https://api.llmhub.com.cn/v1/messages \
                 --header "anthropic-version: 2023-06-01" \
                 --header "content-type: application/json" \
                 --header "x-api-key: $NEWAPI_API_KEY" \
                 --data \
            '{
                "model": "claude-3-5-sonnet-20241022",
                "messages": [
                    {
                        "role": "user",
                        "content": "讲个故事"
                    }
                ],
                "stream": true
            }'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
            examples:
              text_request:
                summary: 纯文本请求
                value:
                  model: claude-3-5-sonnet-20241022
                  max_tokens: 1024
                  messages:
                    - role: user
                      content: Hello, world
              image_request:
                summary: 多模态（图像）请求
                value:
                  model: claude-3-5-sonnet-20241022
                  messages:
                    - role: user
                      content:
                        - type: image
                          source:
                            type: base64
                            media_type: image/jpeg
                            data: /9j/4AAQSkZJRg...
                        - type: text
                          text: 这张图片里有什么?
              tool_use_request:
                summary: 工具使用（函数调用）请求
                value:
                  model: claude-3-5-sonnet-20241022
                  messages:
                    - role: user
                      content: 今天北京的天气怎么样?
                  tools:
                    - name: get_weather
                      description: 获取指定位置的当前天气
                      input_schema:
                        type: object
                        properties:
                          location:
                            type: string
                            description: 城市名称,如:北京
                        required:
                          - location
              stream_request:
                summary: 流式响应请求
                value:
                  model: claude-3-5-sonnet-20241022
                  messages:
                    - role: user
                      content: 讲个故事
                  stream: true
      responses:
        '200':
          description: 成功。对于非流式请求，返回完整的消息对象。对于流式请求，返回一系列 Server-Sent Events (SSE)。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              examples:
                text_response:
                  summary: 文本响应
                  value:
                    id: msg_013Zva2CMHLNnXjNJKqJ2EF
                    type: message
                    role: assistant
                    model: claude-3-5-sonnet-20241022
                    content:
                      - type: text
                        text: Hi! My name is Claude.
                    stop_reason: end_turn
                    stop_sequence: null
                    usage:
                      input_tokens: 2095
                      output_tokens: 503
                image_response:
                  summary: 图像理解响应
                  value:
                    id: msg_013Zva2CMHLNnXjNJKqJ2EF
                    type: message
                    role: assistant
                    model: claude-3-5-sonnet-20241022
                    content:
                      - type: text
                        text: 这张图片显示了一只橙色的猫咪正在窗台上晒太阳。猫咪看起来很放松，眯着眼睛享受阳光。窗外可以看到一些绿色的植物。
                    stop_reason: end_turn
                    stop_sequence: null
                    usage:
                      input_tokens: 3050
                      output_tokens: 892
                tool_use_response:
                  summary: 工具使用响应
                  value:
                    id: msg_013Zva2CMHLNnXjNJKqJ2EF
                    type: message
                    role: assistant
                    model: claude-3-5-sonnet-20241022
                    content:
                      - type: tool_use
                        id: toolu_01D7FLrfh4GYq7yT1ULFeyMV
                        name: get_weather
                        input:
                          location: 北京
                    stop_reason: tool_use
                    stop_sequence: null
                    usage:
                      input_tokens: 2156
                      output_tokens: 468
            text/event-stream:
              schema:
                $ref: '#/components/schemas/MessageStreamEvent'
              examples:
                stream_response:
                  summary: 流式响应事件序列
                  value: |
                    data: {"type":"message_start","message":{"id":"msg_013Zva2CMHLNnXjNJKqJ2EF","model":"claude-3-5-sonnet-20241022","role":"assistant","type":"message"}}

                    data: {"type":"content_block_start","index":0,"content_block":{"type":"text"}}

                    data: {"type":"content_block_delta","index":0,"delta":{"text":"从前"}}
                    
                    data: {"type":"content_block_delta","index":0,"delta":{"text":"有一只"}}
                    
                    data: {"type":"content_block_delta","index":0,"delta":{"text":"小兔子..."}}
                    
                    data: {"type":"content_block_stop","index":0}
                    
                    data: {"type":"message_delta","delta":{"stop_reason":"end_turn","usage":{"input_tokens":2045,"output_tokens":628}}}
                    
                    data: {"type":"message_stop"}
  /responses:
    post:
      operationId: createResponse
      summary: 创建使用指定模型的响应
      description: OpenAI 最先进的模型响应生成接口。支持文本和图像输入以及文本输出。使用先前响应的输出作为输入，与模型创建有状态的交互。使用内置工具扩展模型的功能，用于文件搜索、网页搜索、计算机使用等。允许模型通过函数调用访问外部系统和数据。
      tags:
        - Responses
      security:
        - bearerAuth: []
      x-codeSamples:
        - lang: cURL
          label: 文本输入示例
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": "用三句话给我讲一个关于独角兽睡前故事。"
              }'
        - lang: cURL
          label: 图像输入示例
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": [
                  {
                    "role": "user",
                    "content": [
                      {"type": "input_text", "text": "这张图片描述的是什么？"},
                      {
                        "type": "input_image",
                        "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                      }
                    ]
                  }
                ]
              }'
        - lang: cURL
          label: 文件输入示例
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": [
                  {
                    "role": "user",
                    "content": [
                      {"type": "input_text", "text": "这是什么文件？"},
                      {
                        "type": "input_file",
                        "file_url": "https://www.berkshirehathaway.com/letters/2024ltr.pdf"
                      }
                    ]
                  }
                ]
              }'
        - lang: cURL
          label: 网络搜索示例
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "tools": [{ "type": "web_search_preview" }],
                "input": "今天有什么积极正面的新闻？"
              }'
        - lang: cURL
          label: 文件搜索示例
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "tools": [{
                  "type": "file_search",
                  "vector_store_ids": ["vs_1234567890"],
                  "max_num_results": 20
                }],
                "input": "古代棕龙有哪些特性和属性?"
              }'
        - lang: cURL
          label: 流式响应示例
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "instructions": "你是一位得力的助手。",
                "input": "你好!",
                "stream": true
              }'
        - lang: cURL
          label: 函数调用示例
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": "波士顿今天天气怎么样？",
                "tools": [
                  {
                    "type": "function",
                    "name": "get_current_weather",
                    "description": "获取指定位置的当前天气",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "城市和州, 例如 San Francisco, CA"
                        },
                        "unit": {
                          "type": "string",
                          "enum": ["celsius", "fahrenheit"]
                        }
                      },
                      "required": ["location", "unit"]
                    }
                  }
                ],
                "tool_choice": "auto"
              }'
        - lang: cURL
          label: 高级推理示例
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "o3-mini",
                "input": "How much wood would a woodchuck chuck?",
                "reasoning": {
                  "effort": "high"
                }
              }'
        - lang: JavaScript
          label: 文本输入示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                input: "用三句话给我讲一个关于独角兽睡前故事。"
            });

            console.log(response);
        - lang: JavaScript
          label: 图像输入示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                input: [
                    {
                        role: "user",
                        content: [
                            { type: "input_text", text: "这张图片描述的是什么？" },
                            {
                                type: "input_image",
                                image_url:
                                    "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                            },
                        ],
                    },
                ],
            });

            console.log(response);
        - lang: JavaScript
          label: 文件输入示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                input: [
                    {
                        role: "user",
                        content: [
                            { type: "input_text", text: "这是什么文件？" },
                            {
                                type: "input_file",
                                file_url: "https://www.berkshirehathaway.com/letters/2024ltr.pdf",
                            },
                        ],
                    },
                ],
            });

            console.log(response);
        - lang: JavaScript
          label: 网络搜索示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                tools: [{ type: "web_search_preview" }],
                input: "今天有什么积极正面的新闻？",
            });

            console.log(response);
        - lang: JavaScript
          label: 文件搜索示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                tools: [{
                    type: "file_search",
                    vector_store_ids: ["vs_1234567890"],
                    max_num_results: 20
                }],
                input: "古代棕龙有哪些特性和属性?",
            });

            console.log(response);
        - lang: JavaScript
          label: 流式响应示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                instructions: "你是一位得力的助手。",
                input: "你好!",
                stream: true,
            });

            for await (const event of response) {
                console.log(event);
            }
        - lang: JavaScript
          label: 函数调用示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const tools = [
                {
                    type: "function",
                    name: "get_current_weather",
                    description: "Get the current weather in a given location",
                    parameters: {
                        type: "object",
                        properties: {
                            location: {
                                type: "string",
                                description: "The city and state, e.g. San Francisco, CA",
                            },
                            unit: { type: "string", enum: ["celsius", "fahrenheit"] },
                        },
                        required: ["location", "unit"],
                    },
                },
            ];

            const response = await openai.responses.create({
                model: "gpt-4.1",
                tools: tools,
                input: "波士顿今天天气怎么样？",
                tool_choice: "auto",
            });

            console.log(response);
        - lang: JavaScript
          label: 高级推理示例
          source: |
            import OpenAI from "openai";
            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "o3-mini",
                input: "How much wood would a woodchuck chuck?",
                reasoning: {
                  effort: "high"
                }
            });

            console.log(response);
        - lang: Python
          label: 文本输入示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
              model="gpt-4.1",
              input="用三句话给我讲一个关于独角兽睡前故事。"
            )

            print(response)
        - lang: Python
          label: 图像输入示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
                model="gpt-4.1",
                input=[
                    {
                        "role": "user",
                        "content": [
                            { "type": "input_text", "text": "这张图片描述的是什么？" },
                            {
                                "type": "input_image",
                                "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                            }
                        ]
                    }
                ]
            )

            print(response)
        - lang: Python
          label: 文件输入示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
                model="gpt-4.1",
                input=[
                    {
                        "role": "user",
                        "content": [
                            { "type": "input_text", "text": "这是什么文件？" },
                            {
                                "type": "input_file",
                                "file_url": "https://www.berkshirehathaway.com/letters/2024ltr.pdf"
                            }
                        ]
                    }
                ]
            )

            print(response)
        - lang: Python
          label: 网络搜索示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
                model="gpt-4.1",
                tools=[{ "type": "web_search_preview" }],
                input="今天有什么积极正面的新闻？",
            )

            print(response)
        - lang: Python
          label: 文件搜索示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
                model="gpt-4.1",
                tools=[{
                    "type": "file_search",
                    "vector_store_ids": ["vs_1234567890"],
                    "max_num_results": 20
                }],
                input="古代棕龙有哪些特性和属性?",
            )

            print(response)
        - lang: Python
          label: 流式响应示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
              model="gpt-4.1",
              instructions="你是一位得力的助手。",
              input="你好!",
              stream=True
            )

            for event in response:
              print(event)
        - lang: Python
          label: 函数调用示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            tools = [
                {
                    "type": "function",
                    "name": "get_current_weather",
                    "description": "Get the current weather in a given location",
                    "parameters": {
                      "type": "object",
                      "properties": {
                          "location": {
                              "type": "string",
                              "description": "The city and state, e.g. San Francisco, CA",
                          },
                          "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                      },
                      "required": ["location", "unit"],
                    }
                }
            ]

            response = client.responses.create(
              model="gpt-4.1",
              tools=tools,
              input="波士顿今天天气怎么样？",
              tool_choice="auto"
            )

            print(response)
        - lang: Python
          label: 高级推理示例
          source: |
            from openai import OpenAI
            client = OpenAI()

            response = client.responses.create(
                model="o3-mini",
                input="How much wood would a woodchuck chuck?",
                reasoning={
                    "effort": "high"
                }
            )

            print(response)
        - lang: C#
          label: 文本输入示例
          source: |
            using System;
            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            OpenAIResponse response = client.CreateResponse("用三句话给我讲一个关于独角兽睡前故事。");

            Console.WriteLine(response.GetOutputText());
        - lang: C#
          label: 图像输入示例
          source: |
            using System;
            using System.Collections.Generic;
            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            List<ResponseItem> inputItems =
            [
                ResponseItem.CreateUserMessageItem(
                    [
                        ResponseContentPart.CreateInputTextPart("What is in this image?"),
                        ResponseContentPart.CreateInputImagePart(new Uri("https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"))
                    ]
                )
            ];

            OpenAIResponse response = client.CreateResponse(inputItems);

            Console.WriteLine(response.GetOutputText());
        - lang: C#
          label: 网络搜索示例
          source: |
            using System;
            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            string userInputText = "今天有什么积极正面的新闻？";

            ResponseCreationOptions options = new()
            {
                Tools =
                {
                    ResponseTool.CreateWebSearchTool()
                },
            };

            OpenAIResponse response = client.CreateResponse(userInputText, options);

            Console.WriteLine(response.GetOutputText());
        - lang: C#
          label: 文件搜索示例
          source: |
            using System;
            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            string userInputText = "古代棕龙有哪些特性和属性?";

            ResponseCreationOptions options = new()
            {
                Tools =
                {
                    ResponseTool.CreateFileSearchTool(
                        vectorStoreIds: ["vs_1234567890"],
                        maxResultCount: 20
                    )
                },
            };

            OpenAIResponse response = client.CreateResponse(userInputText, options);

            Console.WriteLine(response.GetOutputText());
        - lang: C#
          label: 流式响应示例
          source: |
            using System;
            using System.ClientModel;
            using System.Threading.Tasks;

            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            string userInputText = "你好!";

            ResponseCreationOptions options = new()
            {
                Instructions = "你是一位得力的助手。",
            };

            AsyncCollectionResult<StreamingResponseUpdate> responseUpdates = client.CreateResponseStreamingAsync(userInputText, options);

            await foreach (StreamingResponseUpdate responseUpdate in responseUpdates)
            {
                if (responseUpdate is StreamingResponseOutputTextDeltaUpdate outputTextDeltaUpdate)
                {
                    Console.Write(outputTextDeltaUpdate.Delta);
                }
            }
        - lang: C#
          label: 函数调用示例
          source: |
            using System;
            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            ResponseTool getCurrentWeatherFunctionTool = ResponseTool.CreateFunctionTool(
                functionName: "get_current_weather",
                functionDescription: "Get the current weather in a given location",
                functionParameters: BinaryData.FromString("""
                    {
                        "type": "object",
                        "properties": {
                            "location": {
                                "type": "string",
                                "description": "The city and state, e.g. San Francisco, CA"
                            },
                            "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]}
                        },
                        "required": ["location", "unit"]
                    }
                    """
                )
            );

            string userInputText = "波士顿今天天气怎么样？";

            ResponseCreationOptions options = new()
            {
                Tools =
                {
                    getCurrentWeatherFunctionTool
                },
                ToolChoice = ResponseToolChoice.CreateAutoChoice(),
            };

            OpenAIResponse response = client.CreateResponse(userInputText, options);
        - lang: C#
          label: 高级推理示例
          source: |
            using System;
            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "o3-mini",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            string userInputText = "How much wood would a woodchuck chuck?";

            ResponseCreationOptions options = new()
            {
                ReasoningOptions = new()
                {
                    ReasoningEffortLevel = ResponseReasoningEffortLevel.High,
                },
            };

            OpenAIResponse response = client.CreateResponse(userInputText, options);

            Console.WriteLine(response.GetOutputText());
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResponseRequest'
            examples:
              bedtimeStory:
                summary: 生成关于独角兽的睡前故事
                value:
                  model: gpt-4.1
                  input: 用三句话给我讲一个关于独角兽睡前故事。
              imageDescription:
                summary: 描述图像内容
                value:
                  model: gpt-4.1
                  input:
                    - role: user
                      content:
                        - type: input_text
                          text: 这张图片描述的是什么？
                        - type: input_image
                          image_url: https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg
              fileDescription:
                summary: 描述文件内容
                value:
                  model: gpt-4.1
                  input:
                    - role: user
                      content:
                        - type: input_text
                          text: 这是什么文件？
                        - type: input_file
                          file_url: https://www.berkshirehathaway.com/letters/2024ltr.pdf
              webSearch:
                summary: 使用工具进行网络搜索
                value:
                  model: gpt-4.1
                  tools:
                    - type: web_search_preview
                  input: 今天有什么积极正面的新闻？
              fileSearch:
                summary: 使用工具进行文件搜索
                value:
                  model: gpt-4.1
                  tools:
                    - type: file_search
                      vector_store_ids:
                        - vs_1234567890
                      max_num_results: 20
                  input: 古代棕龙有哪些特性和属性?
              streamingResponse:
                summary: 生成流式响应
                value:
                  model: gpt-4.1
                  instructions: 你是一位得力的助手。
                  input: 你好!
                  stream: true
              functionCall:
                summary: 使用工具进行函数调用
                value:
                  model: gpt-4.1
                  input: 波士顿今天天气怎么样？
                  tools:
                    - type: function
                      name: get_current_weather
                      description: Get the current weather in a given location
                      parameters:
                        type: object
                        properties:
                          location:
                            type: string
                            description: The city and state, e.g. San Francisco, CA
                          unit:
                            type: string
                            enum: ["celsius", "fahrenheit"]
                        required: ["location", "unit"]
                  tool_choice: auto
              highReasoning:
                summary: 使用高级推理处理文本输入
                value:
                  model: o3-mini
                  input: How much wood would a woodchuck chuck?
                  reasoning:
                    effort: high
      responses:
        '200':
          description: 成功生成包含文本的响应（非流式）或流式事件（流式模式）。
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Response'
                  - $ref: '#/components/schemas/StreamingResponse'
              examples:
                文本描述响应:
                  summary: 文本描述的响应
                  value:
                    id: resp_67ccd2bed1ec8190b14f964abc0542670bb6a6b452d3795b
                    object: response
                    created_at: 1741476542
                    status: completed
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - type: message
                        id: msg_67ccd2bf17f0819081ff3bb2cf6508e60bb6a6b452d3795b
                        status: completed
                        role: assistant
                        content:
                          - type: output_text
                            text: 在银色月光下的宁静树林中，一只名叫卢米娜的独角兽发现了一个反射星光的隐秘水池。当她将角浸入水中，水池开始闪烁，揭示出一条通往无尽夜空的神奇路径。卢米娜满怀惊奇，低语了一个愿望，希望所有梦想者都能找到属于自己的魔法，然后回头一看，她的蹄印如星尘般闪耀。
                            annotations: []
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools: []
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 36
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 87
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 123
                    user: null
                    metadata: {}
                图像描述响应:
                  summary: 图像描述的响应
                  value:
                    id: resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41
                    object: response
                    created_at: 1741476777
                    status: completed
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - type: message
                        id: msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41
                        status: completed
                        role: assistant
                        content:
                          - type: output_text
                            text: 图像展示了一条木制栈道或小径，穿过郁郁葱葱的绿色草地，蓝天下点缀着几朵白云。场景暗示了一个宁静的自然区域，可能是公园或自然保护区。背景中有树木和灌木。
                            annotations: []
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools: []
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 328
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 52
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 380
                    user: null
                    metadata: {}
                文件描述响应:
                  summary: 文件描述的响应
                  value:
                    id: resp_686eef60237881a2bd1180bb8b13de430e34c516d176ff86
                    object: response
                    created_at: 1752100704
                    status: completed
                    background: false
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    max_tool_calls: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - id: msg_686eef60d3e081a29283bdcbc4322fd90e34c516d176ff86
                        type: message
                        status: completed
                        content:
                          - type: output_text
                            annotations: []
                            logprobs: []
                            text: 该文件似乎包含伯克希尔·哈撒韦公司致股东的信摘录，可能是沃伦·巴菲特撰写的。信中涵盖以下主题：1. **沟通理念**：巴菲特强调对股东透明和坦诚报告错误与成功的重要性。2. **错误与学习**：承认过去在业务评估和管理招聘中的错误，强调及时纠正的重要性。3. **首席执行官继任**：提到格雷格·阿贝尔接任新首席执行官，并继续保持诚实沟通的传统。4. **皮特·利格尔故事**：详细描述收购Forest River及其创始人关系，突出信任和有效的商业决策。5. **2024年业绩**：概述业务表现，特别是在保险和投资活动方面，重点提到GEICO的改进。6. **税收贡献**：讨论对美国财政部的重大税收贡献，归功于股东的再投资。7. **投资策略**：分解伯克希尔在控股子公司和可交易股权中的投资，强调长期持有策略。8. **美国资本主义**：反思美国的经济发展及伯克希尔的角色。9. **财产意外险**：洞察财产/意外保险商业模式及其挑战和优势。10. **日本投资**：关于伯克希尔在日本公司的投资及未来计划的信息。11. **年会**：关于奥马哈即将召开的年会的细节，包括日程变更和新书发布。12. **个人轶事**：关于家庭和互动的轻松故事，展现巴菲特的亲和力。13. **财务表现数据**：比较伯克希尔与标普500的年度表现数据，展示长期的显著收益。总体而言，该信强调伯克希尔·哈撒韦对透明度、投资于其业务和更广泛经济体的承诺，以及强有力的领导和审慎的财务管理。
                        role: assistant
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    service_tier: default
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools: []
                    top_logprobs: 0
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 8438
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 398
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 8836
                    user: null
                    metadata: {}
                网络搜索响应:
                  summary: 工具调用网络搜索的响应
                  value:
                    id: resp_67ccf18ef5fc8190b16dbee19bc54e5f087bb177ab789d5c
                    object: response
                    created_at: 1741484430
                    status: completed
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - type: web_search_call
                        id: ws_67ccf18f64008190a39b619f4c8455ef087bb177ab789d5c
                        status: completed
                      - type: message
                        id: msg_67ccf190ca3881909d433c50b1f6357e087bb177ab789d5c
                        status: completed
                        role: assistant
                        content:
                          - type: output_text
                            text: 截至2025年3月9日，一个值得注意的正面新闻故事是...
                            annotations:
                              - type: url_citation
                                start_index: 442
                                end_index: 557
                                url: https://.../?utm_source=chatgpt.com
                                title: ...
                              - type: url_citation
                                start_index: 962
                                end_index: 1077
                                url: https://.../?utm_source=chatgpt.com
                                title: ...
                              - type: url_citation
                                start_index: 1336
                                end_index: 1451
                                url: https://.../?utm_source=chatgpt.com
                                title: ...
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools:
                      - type: web_search_preview
                        domains: []
                        search_context_size: medium
                        user_location:
                          type: approximate
                          city: null
                          country: US
                          region: null
                          timezone: null
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 328
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 356
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 684
                    user: null
                    metadata: {}
                文件搜索响应:
                  summary: 工具调用文件搜索的响应
                  value:
                    id: resp_67ccf4c55fc48190b71bd0463ad3306d09504fb6872380d7
                    object: response
                    created_at: 1741485253
                    status: completed
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - type: file_search_call
                        id: fs_67ccf4c63cd08190887ef6464ba5681609504fb6872380d7
                        status: completed
                        queries:
                          - attributes of an ancient brown dragon
                        results: null
                      - type: message
                        id: msg_67ccf4c93e5c81909d595b369351a9d309504fb6872380d7
                        status: completed
                        role: assistant
                        content:
                          - type: output_text
                            text: 古老棕龙的属性包括...
                            annotations:
                              - type: file_citation
                                index: 320
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 576
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 815
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 815
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 1030
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 1030
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 1156
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 1225
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools:
                      - type: file_search
                        filters: null
                        max_num_results: 20
                        ranking_options:
                          ranker: auto
                          score_threshold: 0.0
                        vector_store_ids:
                          - vs_1234567890
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 18307
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 348
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 18655
                    user: null
                    metadata: {}
                流式响应:
                  summary: 流式响应的示例
                  value:
                    - event: response.created
                      data:
                        type: response.created
                        response:
                          id: resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654
                          object: response
                          created_at: 1741290958
                          status: in_progress
                          error: null
                          incomplete_details: null
                          instructions: 你是一位得力的助手。
                          max_output_tokens: null
                          model: gpt-4.1-2025-04-14
                          output: []
                          parallel_tool_calls: true
                          previous_response_id: null
                          reasoning:
                            effort: null
                            summary: null
                          store: true
                          temperature: 1.0
                          text:
                            format:
                              type: text
                          tool_choice: auto
                          tools: []
                          top_p: 1.0
                          truncation: disabled
                          usage: null
                          user: null
                          metadata: {}
                    - event: response.in_progress
                      data:
                        type: response.in_progress
                        response:
                          id: resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654
                          object: response
                          created_at: 1741290958
                          status: in_progress
                          error: null
                          incomplete_details: null
                          instructions: 你是一位得力的助手。
                          max_output_tokens: null
                          model: gpt-4.1-2025-04-14
                          output: []
                          parallel_tool_calls: true
                          previous_response_id: null
                          reasoning:
                            effort: null
                            summary: null
                          store: true
                          temperature: 1.0
                          text:
                            format:
                              type: text
                          tool_choice: auto
                          tools: []
                          top_p: 1.0
                          truncation: disabled
                          usage: null
                          user: null
                          metadata: {}
                    - event: response.output_item.added
                      data:
                        type: response.output_item.added
                        output_index: 0
                        item:
                          id: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
                          type: message
                          status: in_progress
                          role: assistant
                          content: []
                    - event: response.content_part.added
                      data:
                        type: response.content_part.added
                        item_id: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
                        output_index: 0
                        content_index: 0
                        part:
                          type: output_text
                          text: ""
                          annotations: []
                    - event: response.output_text.delta
                      data:
                        type: response.output_text.delta
                        item_id: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
                        output_index: 0
                        content_index: 0
                        delta: Hi
                    - event: response.output_text.done
                      data:
                        type: response.output_text.done
                        item_id: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
                        output_index: 0
                        content_index: 0
                        text: Hi there! How can I assist you today?
                    - event: response.content_part.done
                      data:
                        type: response.content_part.done
                        item_id: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
                        output_index: 0
                        content_index: 0
                        part:
                          type: output_text
                          text: Hi there! How can I assist you today?
                          annotations: []
                    - event: response.output_item.done
                      data:
                        type: response.output_item.done
                        output_index: 0
                        item:
                          id: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
                          type: message
                          status: completed
                          role: assistant
                          content:
                            - type: output_text
                              text: Hi there! How can I assist you today?
                              annotations: []
                    - event: response.completed
                      data:
                        type: response.completed
                        response:
                          id: resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654
                          object: response
                          created_at: 1741290958
                          status: completed
                          error: null
                          incomplete_details: null
                          instructions: 你是一位得力的助手。
                          max_output_tokens: null
                          model: gpt-4.1-2025-04-14
                          output:
                            - id: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
                              type: message
                              status: completed
                              role: assistant
                              content:
                                - type: output_text
                                  text: Hi there! How can I assist you today?
                                  annotations: []
                          parallel_tool_calls: true
                          previous_response_id: null
                          reasoning:
                            effort: null
                            summary: null
                          store: true
                          temperature: 1.0
                          text:
                            format:
                              type: text
                          tool_choice: auto
                          tools: []
                          top_p: 1.0
                          truncation: disabled
                          usage:
                            input_tokens: 37
                            output_tokens: 11
                            output_tokens_details:
                              reasoning_tokens: 0
                            total_tokens: 48
                          user: null
                          metadata: {}
                函数调用响应:
                  summary: 工具调用函数的响应
                  value:
                    id: resp_67ca09c5efe0819096d0511c92b8c890096610f474011cc0
                    object: response
                    created_at: 1741294021
                    status: completed
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - type: function_call
                        id: fc_67ca09c6bedc8190a7abfec07b1a1332096610f474011cc0
                        call_id: call_unLAR8MvFNptuiZK6K6HCy5k
                        name: get_current_weather
                        arguments: '{"location":"Boston, MA","unit":"celsius"}'
                        status: completed
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools:
                      - type: function
                        description: Get the current weather in a given location
                        name: get_current_weather
                        parameters:
                          type: object
                          properties:
                            location:
                              type: string
                              description: The city and state, e.g. San Francisco, CA
                            unit:
                              type: string
                              enum:
                                - celsius
                                - fahrenheit
                          required:
                            - location
                            - unit
                        strict: true
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 291
                      output_tokens: 23
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 314
                    user: null
                    metadata: {}
                推理响应:
                  summary: 高级推理的响应
                  value:
                    id: resp_67ccd7eca01881908ff0b5146584e408072912b2993db808
                    object: response
                    created_at: 1741477868
                    status: completed
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: o1-2024-12-17
                    output:
                      - type: message
                        id: msg_67ccd7f7b5848190a6f3e95d809f6b44072912b2993db808
                        status: completed
                        role: assistant
                        content:
                          - type: output_text
                            text: 这是一个经典的绕口令...
                            annotations: []
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: high
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools: []
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 81
                      output_tokens: 1035
                      output_tokens_details:
                        reasoning_tokens: 832
                      total_tokens: 1116
                    user: null
                    metadata: {}
  /chat/completions:
    post:
      operationId: createChatCompletion
      summary: 创建聊天完成
      description: 使用消息数组生成聊天响应，支持系统消息（developer 角色）和用户消息。支持文本和图像输入。需要 API 密钥进行身份验证。
      tags:
        - Chat
      security:
        - bearerAuth: []
      x-codeSamples:
        - lang: cURL
          label: 文本输入示例
          source: |
            curl https://api.llmhub.com.cn/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "messages": [
                  {
                    "role": "developer",
                    "content": "你是一位得力的助手。"
                  },
                  {
                    "role": "user",
                    "content": "你好!"
                  }
                ]
              }'
        - lang: cURL
          label: 图像输入示例
          source: |
            curl https://api.llmhub.com.cn/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "messages": [
                  {
                    "role": "user",
                    "content": [
                      {
                        "type": "text",
                        "text": "What is in this image?"
                      },
                      {
                        "type": "image_url",
                        "image_url": {
                          "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                        }
                      }
                    ]
                  }
                ],
                "max_tokens": 300
              }'
        - lang: cURL
          label: 流式响应示例
          source: |
            curl https://api.llmhub.com.cn/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "messages": [
                  {
                    "role": "developer",
                    "content": "你是一位得力的助手。"
                  },
                  {
                    "role": "user",
                    "content": "你好!"
                  }
                ],
                "stream": true
              }'
        - lang: cURL
          label: 函数调用示例
          source: |
            curl https://api.llmhub.com.cn/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "messages": [
                  {
                    "role": "user",
                    "content": "波士顿今天天气怎么样？"
                  }
                ],
                "tools": [
                  {
                    "type": "function",
                    "function": {
                      "name": "get_current_weather",
                      "description": "Get the current weather in a given location",
                      "parameters": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "type": "string",
                            "description": "The city and state, e.g. San Francisco, CA"
                          },
                          "unit": {
                            "type": "string",
                            "enum": ["celsius", "fahrenheit"]
                          }
                        },
                        "required": ["location"]
                      }
                    }
                  }
                ],
                "tool_choice": "auto"
              }'
        - lang: cURL
          label: 对数概率示例
          source: |
            curl https://api.llmhub.com.cn/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "messages": [
                  {
                    "role": "user",
                    "content": "你好!"
                  }
                ],
                "logprobs": true,
                "top_logprobs": 2
              }'
        - lang: Python
          label: 文本输入示例
          source: |
            from openai import OpenAI
            client = OpenAI()

            completion = client.chat.completions.create(
              model="gpt-4.1",
              messages=[
                {"role": "developer", "content": "你是一位得力的助手。"},
                {"role": "user", "content": "你好!"}
              ]
            )

            print(completion.choices[0].message)
        - lang: Python
          label: 图像输入示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.chat.completions.create(
                model="gpt-4.1",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "What's in this image?"},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                                }
                            },
                        ],
                    }
                ],
                max_tokens=300,
            )

            print(response.choices[0])
        - lang: Python
          label: 流式响应示例
          source: |
            from openai import OpenAI
            client = OpenAI()

            completion = client.chat.completions.create(
              model="gpt-4.1",
              messages=[
                {"role": "developer", "content": "你是一位得力的助手。"},
                {"role": "user", "content": "你好!"}
              ],
              stream=True
            )

            for chunk in completion:
              print(chunk.choices[0].delta)
        - lang: Python
          label: 函数调用示例
          source: |
            from openai import OpenAI
            client = OpenAI()

            tools = [
              {
                "type": "function",
                "function": {
                  "name": "get_current_weather",
                  "description": "Get the current weather in a given location",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "location": {
                        "type": "string",
                        "description": "The city and state, e.g. San Francisco, CA",
                      },
                      "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                    },
                    "required": ["location"],
                  },
                }
              }
            ]
            messages = [{"role": "user", "content": "What's the weather like in Boston today?"}]
            completion = client.chat.completions.create(
              model="gpt-4.1",
              messages=messages,
              tools=tools,
              tool_choice="auto"
            )

            print(completion)
        - lang: Python
          label: 对数概率示例
          source: |
            from openai import OpenAI
            client = OpenAI()

            completion = client.chat.completions.create(
              model="gpt-4.1",
              messages=[
                {"role": "user", "content": "你好!"}
              ],
              logprobs=True,
              top_logprobs=2
            )

            print(completion.choices[0].message)
            print(completion.choices[0].logprobs)
        - lang: JavaScript
          label: 文本输入示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            async function main() {
              const completion = await openai.chat.completions.create({
                messages: [{ role: "developer", content: "你是一位得力的助手。" }, { role: "user", content: "你好!" }],
                model: "gpt-4.1",
                store: true,
              });

              console.log(completion.choices[0]);
            }

            main();
        - lang: JavaScript
          label: 图像输入示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            async function main() {
              const response = await openai.chat.completions.create({
                model: "gpt-4.1",
                messages: [
                  {
                    role: "user",
                    content: [
                      { type: "text", text: "What's in this image?" },
                      {
                        type: "image_url",
                        image_url: {
                          "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                        },
                      }
                    ],
                  },
                ],
              });
              console.log(response.choices[0]);
            }
            main();
        - lang: JavaScript
          label: 流式响应示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            async function main() {
              const completion = await openai.chat.completions.create({
                model: "gpt-4.1",
                messages: [
                  {"role": "developer", "content": "你是一位得力的助手。"},
                  {"role": "user", "content": "你好!"}
                ],
                stream: true,
              });

              for await (const chunk of completion) {
                console.log(chunk.choices[0].delta.content);
              }
            }

            main();
        - lang: JavaScript
          label: 函数调用示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            async function main() {
              const messages = [{"role": "user", "content": "What's the weather like in Boston today?"}];
              const tools = [
                  {
                    "type": "function",
                    "function": {
                      "name": "get_current_weather",
                      "description": "Get the current weather in a given location",
                      "parameters": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "type": "string",
                            "description": "The city and state, e.g. San Francisco, CA",
                          },
                          "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                        },
                        "required": ["location"],
                      },
                    }
                  }
              ];

              const response = await openai.chat.completions.create({
                model: "gpt-4.1",
                messages: messages,
                tools: tools,
                tool_choice: "auto",
              });

              console.log(response);
            }

            main();
        - lang: JavaScript
          label: 对数概率示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            async function main() {
              const completion = await openai.chat.completions.create({
                messages: [{ role: "user", content: "你好!" }],
                model: "gpt-4.1",
                logprobs: true,
                top_logprobs: 2,
              });

              console.log(completion.choices[0]);
            }

            main();
        - lang: C#
          label: 文本输入示例
          source: |
            using System;
            using System.Collections.Generic;

            using OpenAI.Chat;

            ChatClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            List<ChatMessage> messages =
            [
                new SystemChatMessage("你是一位得力的助手。"),
                new UserChatMessage("你好!")
            ];

            ChatCompletion completion = client.CompleteChat(messages);

            Console.WriteLine(completion.Content[0].Text);
        - lang: C#
          label: 图像输入示例
          source: |
            using System;
            using System.Collections.Generic;

            using OpenAI.Chat;

            ChatClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            List<ChatMessage> messages =
            [
                new UserChatMessage(
                [
                    ChatMessageContentPart.CreateTextPart("What's in this image?"),
                    ChatMessageContentPart.CreateImagePart(new Uri("https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"))
                ])
            ];

            ChatCompletion completion = client.CompleteChat(messages);

            Console.WriteLine(completion.Content[0].Text);
        - lang: C#
          label: 流式响应示例
          source: |
            using System;
            using System.ClientModel;
            using System.Collections.Generic;
            using System.Threading.Tasks;

            using OpenAI.Chat;

            ChatClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            List<ChatMessage> messages =
            [
                new SystemChatMessage("你是一位得力的助手。"),
                new UserChatMessage("你好!")
            ];

            AsyncCollectionResult<StreamingChatCompletionUpdate> completionUpdates = client.CompleteChatStreamingAsync(messages);

            await foreach (StreamingChatCompletionUpdate completionUpdate in completionUpdates)
            {
                if (completionUpdate.ContentUpdate.Count > 0)
                {
                    Console.Write(completionUpdate.ContentUpdate[0].Text);
                }
            }
        - lang: C#
          label: 函数调用示例
          source: |
            using System;
            using System.Collections.Generic;

            using OpenAI.Chat;

            ChatClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            ChatTool getCurrentWeatherTool = ChatTool.CreateFunctionTool(
                functionName: "get_current_weather",
                functionDescription: "Get the current weather in a given location",
                functionParameters: BinaryData.FromString("""
                    {
                        "type": "object",
                        "properties": {
                            "location": {
                                "type": "string",
                                "description": "The city and state, e.g. San Francisco, CA"
                            },
                            "unit": {
                                "type": "string",
                                "enum": [ "celsius", "fahrenheit" ]
                            }
                        },
                        "required": [ "location" ]
                    }
                """)
            );

            List<ChatMessage> messages =
            [
                new UserChatMessage("What's the weather like in Boston today?"),
            ];

            ChatCompletionOptions options = new()
            {
                Tools =
                {
                    getCurrentWeatherTool
                },
                ToolChoice = ChatToolChoice.CreateAutoChoice(),
            };

            ChatCompletion completion = client.CompleteChat(messages, options);
        - lang: C#
          label: 对数概率示例
          source: |
            using System;
            using System.Collections.Generic;

            using OpenAI.Chat;

            ChatClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            List<ChatMessage> messages =
            [
                new UserChatMessage("你好!")
            ];

            ChatCompletionOptions options = new()
            {
                IncludeLogProbabilities = true,
                TopLogProbabilityCount = 2
            };

            ChatCompletion completion = client.CompleteChat(messages, options);

            Console.WriteLine(completion.Content[0].Text);
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
            examples:
              simpleChat:
                summary: 简单的聊天完成
                value:
                  model: gpt-4.1
                  messages:
                    - role: developer
                      content: 你是一位得力的助手。
                    - role: user
                      content: 你好!
              streamingChat:
                summary: 流式聊天完成
                value:
                  model: gpt-4.1
                  messages:
                    - role: developer
                      content: 你是一位得力的助手。
                    - role: user
                      content: 你好!
                  stream: true
              imageChat:
                summary: 图像输入的聊天完成
                value:
                  model: gpt-4.1
                  messages:
                    - role: user
                      content:
                        - type: text
                          text: What's in this image?
                        - type: image_url
                          image_url:
                            url: https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg
                  max_tokens: 300
              functionCallChat:
                summary: 函数调用的聊天完成
                value:
                  model: gpt-4.1
                  messages:
                    - role: user
                      content: 波士顿今天天气怎么样？
                  tools:
                    - type: function
                      function:
                        name: get_current_weather
                        description: Get the current weather in a given location
                        parameters:
                          type: object
                          properties:
                            location:
                              type: string
                              description: The city and state, e.g. San Francisco, CA
                            unit:
                              type: string
                              enum: ["celsius", "fahrenheit"]
                          required: ["location"]
                  tool_choice: auto
              logprobsChat:
                summary: 对数概率的聊天完成
                value:
                  model: gpt-4.1
                  messages:
                    - role: user
                      content: 你好!
                  logprobs: true
                  top_logprobs: 2
      responses:
        '200':
          description: 成功生成聊天完成响应。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletion'
              examples:
                文本描述响应:
                  summary: 聊天完成的响应
                  value:
                    id: chatcmpl-B9MBs8CjcvOU2jLn4n570S5qMJKcT
                    object: chat.completion
                    created: 1741569952
                    model: gpt-4.1-2025-04-14
                    choices:
                      - index: 0
                        message:
                          role: assistant
                          content: 你好！今天我能帮您什么？
                          refusal: null
                          annotations: []
                        logprobs: null
                        finish_reason: stop
                    usage:
                      prompt_tokens: 19
                      completion_tokens: 10
                      total_tokens: 29
                      prompt_tokens_details:
                        cached_tokens: 0
                        audio_tokens: 0
                      completion_tokens_details:
                        reasoning_tokens: 0
                        audio_tokens: 0
                        accepted_prediction_tokens: 0
                        rejected_prediction_tokens: 0
                    service_tier: default
                图片描述响应:
                  summary: 图像输入的聊天完成响应
                  value:
                    id: chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG
                    object: chat.completion
                    created: 1741570283
                    model: gpt-4.1-2025-04-14
                    choices:
                      - index: 0
                        message:
                          role: assistant
                          content: The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.
                          refusal: null
                          annotations: []
                        logprobs: null
                        finish_reason: stop
                    usage:
                      prompt_tokens: 1117
                      completion_tokens: 46
                      total_tokens: 1163
                      prompt_tokens_details:
                        cached_tokens: 0
                        audio_tokens: 0
                      completion_tokens_details:
                        reasoning_tokens: 0
                        audio_tokens: 0
                        accepted_prediction_tokens: 0
                        rejected_prediction_tokens: 0
                    service_tier: default
                流式响应:
                  summary: 流式聊天完成的响应
                  value:
                    - id: chatcmpl-123
                      object: chat.completion.chunk
                      created: 1694268190
                      model: gpt-4o-mini
                      system_fingerprint: fp_44709d6fcb
                      choices:
                        - index: 0
                          delta:
                            role: assistant
                            content: ""
                          logprobs: null
                          finish_reason: null
                    - id: chatcmpl-123
                      object: chat.completion.chunk
                      created: 1694268190
                      model: gpt-4o-mini
                      system_fingerprint: fp_44709d6fcb
                      choices:
                        - index: 0
                          delta:
                            content: Hello
                          logprobs: null
                          finish_reason: null
                    - id: chatcmpl-123
                      object: chat.completion.chunk
                      created: 1694268190
                      model: gpt-4o-mini
                      system_fingerprint: fp_44709d6fcb
                      choices:
                        - index: 0
                          delta: {}
                          logprobs: null
                          finish_reason: stop
                函数调用响应:
                  summary: 函数调用的聊天完成响应
                  value:
                    id: chatcmpl-abc123
                    object: chat.completion
                    created: 1699896916
                    model: gpt-4o-mini
                    choices:
                      - index: 0
                        message:
                          role: assistant
                          content: null
                          tool_calls:
                            - id: call_abc123
                              type: function
                              function:
                                name: get_current_weather
                                arguments: "{\"location\": \"Boston, MA\"}"
                          refusal: null
                          annotations: []
                        logprobs: null
                        finish_reason: tool_calls
                    usage:
                      prompt_tokens: 82
                      completion_tokens: 17
                      total_tokens: 99
                      completion_tokens_details:
                        reasoning_tokens: 0
                        accepted_prediction_tokens: 0
                        rejected_prediction_tokens: 0
                对数概率响应:
                  summary: 对数概率的聊天完成响应
                  value:
                    id: chatcmpl-123
                    object: chat.completion
                    created: 1702685778
                    model: gpt-4o-mini
                    choices:
                      - index: 0
                        message:
                          role: assistant
                          content: 你好! How can I assist you today?
                        logprobs:
                          content:
                            - token: Hello
                              logprob: -0.31725305
                              bytes: [72, 101, 108, 108, 111]
                              top_logprobs:
                                - token: Hello
                                  logprob: -0.31725305
                                  bytes: [72, 101, 108, 108, 111]
                                - token: Hi
                                  logprob: -1.3190403
                                  bytes: [72, 105]
                            - token: "!"
                              logprob: -0.02380986
                              bytes: [33]
                              top_logprobs:
                                - token: "!"
                                  logprob: -0.02380986
                                  bytes: [33]
                                - token: " there"
                                  logprob: -3.787621
                                  bytes: [32, 116, 104, 101, 114, 101]
                            - token: " How"
                              logprob: -0.000054669687
                              bytes: [32, 72, 111, 119]
                              top_logprobs:
                                - token: " How"
                                  logprob: -0.000054669687
                                  bytes: [32, 72, 111, 119]
                                - token: "<|end|>"
                                  logprob: -10.953937
                                  bytes: null
                            - token: " can"
                              logprob: -0.015801601
                              bytes: [32, 99, 97, 110]
                              top_logprobs:
                                - token: " can"
                                  logprob: -0.015801601
                                  bytes: [32, 99, 97, 110]
                                - token: " may"
                                  logprob: -4.161023
                                  bytes: [32, 109, 97, 121]
                            - token: " I"
                              logprob: -3.7697225e-6
                              bytes: [32, 73]
                              top_logprobs:
                                - token: " I"
                                  logprob: -3.7697225e-6
                                  bytes: [32, 73]
                                - token: " assist"
                                  logprob: -13.596657
                                  bytes: [32, 97, 115, 115, 105, 115, 116]
                            - token: " assist"
                              logprob: -0.04571125
                              bytes: [32, 97, 115, 115, 105, 115, 116]
                              top_logprobs:
                                - token: " assist"
                                  logprob: -0.04571125
                                  bytes: [32, 97, 115, 115, 105, 115, 116]
                                - token: " help"
                                  logprob: -3.1089056
                                  bytes: [32, 104, 101, 108, 112]
                            - token: " you"
                              logprob: -5.4385737e-6
                              bytes: [32, 121, 111, 117]
                              top_logprobs:
                                - token: " you"
                                  logprob: -5.4385737e-6
                                  bytes: [32, 121, 111, 117]
                                - token: " today"
                                  logprob: -12.807695
                                  bytes: [32, 116, 111, 100, 97, 121]
                            - token: " today"
                              logprob: -0.0040071653
                              bytes: [32, 116, 111, 100, 97, 121]
                              top_logprobs:
                                - token: " today"
                                  logprob: -0.0040071653
                                  bytes: [32, 116, 111, 100, 97, 121]
                                - token: "?"
                                  logprob: -5.5247097
                                  bytes: [63]
                            - token: "?"
                              logprob: -0.0008108172
                              bytes: [63]
                              top_logprobs:
                                - token: "?"
                                  logprob: -0.0008108172
                                  bytes: [63]
                                - token: "?\n"
                                  logprob: -7.184561
                                  bytes: [63, 10]
                        finish_reason: stop
                    usage:
                      prompt_tokens: 9
                      completion_tokens: 9
                      total_tokens: 18
                      completion_tokens_details:
                        reasoning_tokens: 0
                        accepted_prediction_tokens: 0
                        rejected_prediction_tokens: 0
                    system_fingerprint: null
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: Claude API 使用的 API 密钥。
  schemas:
    # --- Claude Messages Schemas START ---
    CreateMessageRequest:
      type: object
      required:
        - model
        - messages
      properties:
        model:
          type: string
          description: 用于生成响应的模型 ID。
          example: claude-3-5-sonnet-20241022
        messages:
          type: array
          description: 按时间顺序排列的输入消息数组。
          items:
            $ref: '#/components/schemas/ClaudeMessage'
        max_tokens:
          type: integer
          description: 模型在响应中生成的最大令牌数。
          example: 1024
        tools:
          type: array
          description: 模型可以使用的工具列表。
          items:
            $ref: '#/components/schemas/ClaudeTool'
        stream:
          type: boolean
          default: false
          description: 是否以流式方式返回部分消息增量。
          example: true
    ClaudeMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [user, assistant]
          description: 消息的角色。
          example: user
        content:
          oneOf:
            - type: string
              description: 纯文本消息内容。
              example: Hello, world
            - type: array
              description: 多部分内容数组，用于多模态输入。
              items:
                $ref: '#/components/schemas/ClaudeContentBlock'
    ClaudeContentBlock:
      oneOf:
        - $ref: '#/components/schemas/TextContentBlock'
        - $ref: '#/components/schemas/ImageContentBlock'
    TextContentBlock:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          description: 内容类型。
          enum: [text]
          example: text
        text:
          type: string
          description: 文本内容。
          example: 这张图片里有什么?
    ImageContentBlock:
      type: object
      required:
        - type
        - source
      properties:
        type:
          type: string
          description: 内容类型.
          enum: [image]
          example: image
        source:
          $ref: '#/components/schemas/ImageSource'
    ImageSource:
      type: object
      required:
        - type
        - media_type
        - data
      properties:
        type:
          type: string
          enum: [base64]
          description: 图像数据的编码类型。
          example: base64
        media_type:
          type: string
          description: 图像的媒体类型 (MIME type)。
          enum: [image/jpeg, image/png, image/gif, image/webp]
          example: image/jpeg
        data:
          type: string
          format: byte
          description: Base64 编码的图像数据。
          example: /9j/4AAQSkZJRg...
    ClaudeTool:
      type: object
      required:
        - name
        - input_schema
      properties:
        name:
          type: string
          description: 工具的名称。
          example: get_weather
        description:
          type: string
          description: 对工具功能的纯文本描述。
          example: 获取指定位置的当前天气
        input_schema:
          type: object
          description: 工具输入参数的 JSON Schema。
          example:
            type: object
            properties:
              location:
                type: string
                description: "城市名称,如:北京"
            required: [location]
    MessageResponse:
      type: object
      properties:
        id:
          type: string
          description: 消息的唯一标识符。
          example: msg_013Zva2CMHLNnXjNJKqJ2EF
        type:
          type: string
          enum: [message]
          description: 对象类型。
          example: message
        role:
          type: string
          enum: [assistant]
          description: 消息的角色。
          example: assistant
        model:
          type: string
          description: 用于生成消息的模型。
          example: claude-3-5-sonnet-20241022
        content:
          type: array
          description: 模型生成的响应内容块。
          items:
            oneOf:
              - $ref: '#/components/schemas/ResponseTextContent'
              - $ref: '#/components/schemas/ResponseToolUseContent'
        stop_reason:
          type: string
          nullable: true
          enum: [end_turn, tool_use, max_tokens, stop_sequence]
          description: 模型停止生成内容的原因。
          example: tool_use
        stop_sequence:
          type: string
          nullable: true
          description: 如果是由于停止序列导致停止，则为该序列。
        usage:
          $ref: '#/components/schemas/UsageInfo'
    ResponseTextContent:
      type: object
      properties:
        type:
          type: string
          enum: [text]
          example: text
        text:
          type: string
          nullable: true # text can be empty in content_block_start
          example: Hi! My name is Claude.
    ResponseToolUseContent:
      type: object
      properties:
        type:
          type: string
          enum: [tool_use]
          example: tool_use
        id:
          type: string
          description: 工具使用的唯一 ID。
          example: toolu_01D7FLrfh4GYq7yT1ULFeyMV
        name:
          type: string
          description: 使用的工具名称。
          example: get_weather
        input:
          type: object
          description: 提供给工具的输入。
          example:
            location: 北京
    UsageInfo:
      type: object
      properties:
        input_tokens:
          type: integer
          description: 输入提示中的令牌数。
          example: 2095
        output_tokens:
          type: integer
          description: 模型生成的令牌数。
          example: 503
    MessageStreamEvent:
      type: object
      description: 代表流式响应中的单个 Server-Sent Event (SSE)。
      discriminator:
        propertyName: type
        mapping:
          message_start: '#/components/schemas/MessageStartEvent'
          content_block_start: '#/components/schemas/ContentBlockStartEvent'
          content_block_delta: '#/components/schemas/ContentBlockDeltaEvent'
          content_block_stop: '#/components/schemas/ContentBlockStopEvent'
          message_delta: '#/components/schemas/MessageDeltaEvent'
          message_stop: '#/components/schemas/MessageStopEvent'
      oneOf:
        - $ref: '#/components/schemas/MessageStartEvent'
        - $ref: '#/components/schemas/ContentBlockStartEvent'
        - $ref: '#/components/schemas/ContentBlockDeltaEvent'
        - $ref: '#/components/schemas/ContentBlockStopEvent'
        - $ref: '#/components/schemas/MessageDeltaEvent'
        - $ref: '#/components/schemas/MessageStopEvent'
    MessageStartEvent:
      type: object
      description: 当消息开始生成时发送。
      required: [type, message]
      properties:
        type:
          type: string
          enum: [message_start]
        message:
          $ref: '#/components/schemas/MessageStartMessageObject'
    MessageStartMessageObject:
      type: object
      description: message_start 事件中的简化消息对象。
      required: [id, type, role, model]
      properties:
        id:
          type: string
        type:
          type: string
          enum: [message]
        role:
          type: string
          enum: [assistant]
        model:
          type: string
    ContentBlockStartEvent:
      type: object
      description: 当新的内容块开始时发送。
      required: [type, index, content_block]
      properties:
        type:
          type: string
          enum: [content_block_start]
        index:
          type: integer
          description: 内容块在 `message.content` 数组中的索引。
        content_block:
          type: object
          required: [type]
          properties:
            type:
              type: string
              enum: [text]
    ContentBlockDeltaEvent:
      type: object
      description: 文本内容块的增量更新。
      required: [type, index, delta]
      properties:
        type:
          type: string
          enum: [content_block_delta]
        index:
          type: integer
          description: 内容块的索引。
        delta:
          type: object
          required: [text]
          properties:
            text:
              type: string
              description: 文本增量。
    ContentBlockStopEvent:
      type: object
      description: 当内容块完成时发送。
      required: [type, index]
      properties:
        type:
          type: string
          enum: [content_block_stop]
        index:
          type: integer
          description: 内容块的索引。
    MessageDeltaEvent:
      type: object
      description: 消息元数据的增量更新。
      required: [type, delta]
      properties:
        type:
          type: string
          enum: [message_delta]
        delta:
          type: object
          required: [stop_reason, usage]
          properties:
            stop_reason:
              type: string
              enum: [end_turn, max_tokens, stop_sequence, tool_use]
            usage:
              type: object
              required: [input_tokens, output_tokens]
              properties:
                input_tokens:
                  type: integer
                output_tokens:
                  type: integer
    MessageStopEvent:
      type: object
      description: 当消息完成生成时发送。
      required: [type]
      properties:
        type:
          type: string
          enum: [message_stop]
    # --- Claude Messages Schemas END ---
    CreateResponseRequest:
      type: object
      required:
        - model
        - input
      properties:
        model:
          type: string
          description: 用于生成响应的模型 ID（例如 gpt-4.1 或 o3-mini）。
          example: o3-mini
        input:
          oneOf:
            - type: string
              description: 简单的文本输入提示。
              example: How much wood would a woodchuck chuck?
            - type: array
              description: 包含用户消息的数组，支持文本、图像或文件输入。
              items:
                $ref: '#/components/schemas/InputMessage'
        instructions:
          type: string
          description: 系统指令，定义模型的行为。
          example: 你是一位得力的助手。
        stream:
          type: boolean
          description: 是否启用流式响应。
          example: true
        tools:
          type: array
          description: 可选的工具列表，例如网络搜索、文件搜索或函数调用。
          items:
            $ref: '#/components/schemas/Tool'
          example:
            - type: function
              name: get_current_weather
              description: Get the current weather in a given location
              parameters:
                type: object
                properties:
                  location:
                    type: string
                    description: The city and state, e.g. San Francisco, CA
                  unit:
                    type: string
                    enum: ["celsius", "fahrenheit"]
                required: ["location", "unit"]
        tool_choice:
          type: string
          description: 工具选择策略，例如 "auto"。
          example: auto
        reasoning:
          type: object
          description: 推理选项，控制推理强度。
          properties:
            effort:
              type: string
              description: 推理努力程度，例如 "high"。
              example: high
          example:
            effort: high
      additionalProperties: false
    InputMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          description: 消息的角色，例如 "user"。
          example: user
        content:
          type: array
          description: 消息内容，支持文本、图像或文件。
          items:
            oneOf:
              - $ref: '#/components/schemas/InputTextContent'
              - $ref: '#/components/schemas/InputImageContent'
              - $ref: '#/components/schemas/InputFileContent'
    InputTextContent:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          description: 内容类型，固定为 "input_text"。
          example: input_text
        text:
          type: string
          description: 输入的文本内容。
          example: How much wood would a woodchuck chuck?
      additionalProperties: false
    InputImageContent:
      type: object
      required:
        - type
        - image_url
      properties:
        type:
          type: string
          description: 内容类型，固定为 "input_image"。
          example: input_image
        image_url:
          type: string
          description: 图像的 URL 地址。
          example: https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg
      additionalProperties: false
    InputFileContent:
      type: object
      required:
        - type
        - file_url
      properties:
        type:
          type: string
          description: 内容类型，固定为 "input_file"。
          example: input_file
        file_url:
          type: string
          description: 文件的 URL 地址。
          example: https://www.berkshirehathaway.com/letters/2024ltr.pdf
      additionalProperties: false
    Tool:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: 工具类型，例如 "web_search_preview"、"file_search" 或 "function"。
          example: function
        name:
          type: string
          description: 函数名称（适用于 function 类型）。
          example: get_current_weather
        description:
          type: string
          description: 函数描述（适用于 function 类型）。
          example: Get the current weather in a given location
        parameters:
          type: object
          description: 函数参数定义（适用于 function 类型）。
          example:
            type: object
            properties:
              location:
                type: string
                description: The city and state, e.g. San Francisco, CA
              unit:
                type: string
                enum: ["celsius", "fahrenheit"]
            required: ["location", "unit"]
        strict:
          type: boolean
          description: 是否强制执行参数结构（适用于 function 类型）。
          example: true
        domains:
          type: array
          description: 可选的搜索域名限制（适用于 web_search_preview）。
          items:
            type: string
          example: []
        search_context_size:
          type: string
          description: 搜索上下文大小，例如 "medium"（适用于 web_search_preview）。
          example: medium
        user_location:
          type: object
          description: 用户位置信息（适用于 web_search_preview）。
          properties:
            type:
              type: string
              example: approximate
            city:
              type: string
              nullable: true
            country:
              type: string
              example: US
            region:
              type: string
              nullable: true
            timezone:
              type: string
              nullable: true
        vector_store_ids:
          type: array
          description: 用于文件搜索的向量存储 ID 列表（适用于 file_search）。
          items:
            type: string
          example:
            - vs_1234567890
        max_num_results:
          type: integer
          description: 文件搜索的最大结果数（适用于 file_search）。
          example: 20
        filters:
          type: object
          description: 文件搜索的过滤条件（适用于 file_search）。
          nullable: true
        ranking_options:
          type: object
          description: 文件搜索的排名选项（适用于 file_search）。
          properties:
            ranker:
              type: string
              description: 排名器类型。
              example: auto
            score_threshold:
              type: number
              description: 分数阈值。
              example: 0.0
      additionalProperties: false
    Response:
      type: object
      properties:
        id:
          type: string
          description: 响应的唯一标识符。
          example: resp_67ccd7eca01881908ff0b5146584e408072912b2993db808
        object:
          type: string
          description: 对象类型，始终为 "response"。
          example: response
        created_at:
          type: integer
          description: 响应创建时的 Unix 时间戳（秒）。
          example: 1741477868
        status:
          type: string
          description: 响应的状态。
          example: completed
        background:
          type: boolean
          description: 是否为后台任务。
          example: false
        error:
          type: object
          description: 错误详情（如果有）。
          nullable: true
        incomplete_details:
          type: object
          description: 关于不完整响应的详细信息（如果适用）。
          nullable: true
        instructions:
          type: string
          description: 系统指令，定义模型的行为。
          example: 你是一位得力的助手。
        max_output_tokens:
          type: integer
          description: 最大输出令牌数（如果指定）。
          nullable: true
        max_tool_calls:
          type: integer
          description: 最大工具调用次数（如果指定）。
          nullable: true
        model:
          type: string
          description: 用于生成响应的模型。
          example: o1-2024-12-17
        output:
          type: array
          description: 输出消息或工具调用数组。
          items:
            oneOf:
              - $ref: '#/components/schemas/OutputMessage'
              - $ref: '#/components/schemas/WebSearchCall'
              - $ref: '#/components/schemas/FileSearchCall'
              - $ref: '#/components/schemas/FunctionCall'
        parallel_tool_calls:
          type: boolean
          description: 是否启用并行工具调用。
          example: true
        previous_response_id:
          type: string
          description: 前一个响应的 ID（如果有）。
          nullable: true
        reasoning:
          type: object
          description: 响应的推理详情。
          properties:
            effort:
              type: string
              description: 推理努力程度，例如 "high"。
              example: high
            summary:
              type: string
              nullable: true
        service_tier:
          type: string
          description: 服务层级。
          example: default
        store:
          type: boolean
          description: 是否存储响应。
          example: true
        temperature:
          type: number
          description: 采样的温度值。
          example: 1.0
        text:
          type: object
          description: 文本格式详情。
          properties:
            format:
              type: object
              properties:
                type:
                  type: string
                  example: text
        tool_choice:
          type: string
          description: 工具选择策略。
          example: auto
        tools:
          type: array
          description: 使用的工具列表（如果有）。
          items:
            $ref: '#/components/schemas/Tool'
        top_logprobs:
          type: integer
          description: 返回的 top logprobs 数量。
          example: 0
        top_p:
          type: number
          description: Top-p 采样值。
          example: 1.0
        truncation:
          type: string
          description: 截断策略。
          example: disabled
        usage:
          type: object
          description: 令牌使用详情。
          properties:
            input_tokens:
              type: integer
              example: 81
            input_tokens_details:
              type: object
              properties:
                cached_tokens:
                  type: integer
                  example: 0
            output_tokens:
              type: integer
              example: 1035
            output_tokens_details:
              type: object
              properties:
                reasoning_tokens:
                  type: integer
                  example: 832
            total_tokens:
              type: integer
              example: 1116
        user:
          type: object
          description: 用户信息（如果提供）。
          nullable: true
        metadata:
          type: object
          description: 响应的附加元数据。
          example: {}
    StreamingResponse:
      type: array
      description: 流式响应的事件列表，每个事件包含事件类型和数据。
      items:
        type: object
        properties:
          event:
            type: string
            description: 流式事件类型。
            example: response.created
          data:
            oneOf:
              - $ref: '#/components/schemas/Response'
              - $ref: '#/components/schemas/OutputItemAdded'
              - $ref: '#/components/schemas/ContentPartAdded'
              - $ref: '#/components/schemas/OutputTextDelta'
              - $ref: '#/components/schemas/OutputTextDone'
              - $ref: '#/components/schemas/ContentPartDone'
              - $ref: '#/components/schemas/OutputItemDone'
    OutputItemAdded:
      type: object
      properties:
        type:
          type: string
          description: 事件类型，固定为 "response.output_item.added"。
          example: response.output_item.added
        output_index:
          type: integer
          description: 输出项的索引。
          example: 0
        item:
          $ref: '#/components/schemas/OutputMessage'
    ContentPartAdded:
      type: object
      properties:
        type:
          type: string
          description: 事件类型，固定为 "response.content_part.added"。
          example: response.content_part.added
        item_id:
          type: string
          description: 关联的消息 ID。
          example: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
        output_index:
          type: integer
          description: 输出项的索引。
          example: 0
        content_index:
          type: integer
          description: 内容部分的索引。
          example: 0
        part:
          type: object
          description: 添加的内容部分。
          properties:
            type:
              type: string
              description: 内容类型，固定为 "output_text"。
              example: output_text
            text:
              type: string
              description: 初始文本内容（可能为空）。
              example: ""
            annotations:
              type: array
              description: 内容的注解（如果有）。
              items:
                type: object
              example: []
    OutputTextDelta:
      type: object
      properties:
        type:
          type: string
          description: 事件类型，固定为 "response.output_text.delta"。
          example: response.output_text.delta
        item_id:
          type: string
          description: 关联的消息 ID。
          example: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
        output_index:
          type: integer
          description: 输出项的索引。
          example: 0
        content_index:
          type: integer
          description: 内容部分的索引。
          example: 0
        delta:
          type: string
          description: 文本增量。
          example: Hi
    OutputTextDone:
      type: object
      properties:
        type:
          type: string
          description: 事件类型，固定为 "response.output_text.done"。
          example: response.output_text.done
        item_id:
          type: string
          description: 关联的消息 ID。
          example: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
        output_index:
          type: integer
          description: 输出项的索引。
          example: 0
        content_index:
          type: integer
          description: 内容部分的索引。
          example: 0
        text:
          type: string
          description: 完成的文本内容。
          example: Hi there! How can I assist you today?
    ContentPartDone:
      type: object
      properties:
        type:
          type: string
          description: 事件类型，固定为 "response.content_part.done"。
          example: response.content_part.done
        item_id:
          type: string
          description: 关联的消息 ID。
          example: msg_67c9fdcf37fc8190ba82116e33fb28c507b8b0ad4e5eb654
        output_index:
          type: integer
          description: 输出项的索引。
          example: 0
        content_index:
          type: integer
          description: 内容部分的索引。
          example: 0
        part:
          type: object
          description: 完成的内容部分。
          properties:
            type:
              type: string
              description: 内容类型，固定为 "output_text"。
              example: output_text
            text:
              type: string
              description: 完成的文本内容。
              example: Hi there! How can I assist you today?
            annotations:
              type: array
              description: 内容的注解（如果有）。
              items:
                type: object
              example: []
    OutputItemDone:
      type: object
      properties:
        type:
          type: string
          description: 事件类型，固定为 "response.output_item.done"。
          example: response.output_item.done
        output_index:
          type: integer
          description: 输出项的索引。
          example: 0
        item:
          $ref: '#/components/schemas/OutputMessage'
    OutputMessage:
      type: object
      properties:
        id:
          type: string
          description: 消息的唯一标识符。
          example: msg_67ccd7f7b5848190a6f3e95d809f6b44072912b2993db808
        type:
          type: string
          description: 输出消息的类型。
          example: message
        status:
          type: string
          description: 消息的状态。
          example: completed
        role:
          type: string
          description: 消息发送者的角色。
          example: assistant
        content:
          type: array
          description: 消息的内容。
          items:
            type: object
            properties:
              type:
                type: string
                description: 内容的类型。
                example: output_text
              text:
                type: string
                description: 生成的文本内容。
                example: 这是一个经典的绕口令...
              annotations:
                type: array
                description: 内容的注解（如果有）。
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      description: 注解类型，例如 "url_citation" 或 "file_citation"。
                      example: file_citation
                    index:
                      type: integer
                      description: 注解的索引位置。
                      example: 320
                    file_id:
                      type: string
                      description: 引用的文件 ID（适用于 file_citation）。
                      example: file-4wDz5b167pAf72nx1h9eiN
                    filename:
                      type: string
                      description: 引用的文件名（适用于 file_citation）。
                      example: dragons.pdf
                    start_index:
                      type: integer
                      description: 注解起始索引（适用于 url_citation）。
                      example: 442
                    end_index:
                      type: integer
                      description: 注解结束索引（适用于 url_citation）。
                      example: 557
                    url:
                      type: string
                      description: 引用的 URL（适用于 url_citation）。
                      example: https://.../?utm_source=chatgpt.com
                    title:
                      type: string
                      description: 引用标题（适用于 url_citation）。
                      example: ...
              logprobs:
                type: array
                description: 对数概率（如果有）。
                items:
                  type: object
                example: []
    WebSearchCall:
      type: object
      properties:
        id:
          type: string
          description: 工具调用的唯一标识符。
          example: ws_67ccf18f64008190a39b619f4c8455ef087bb177ab789d5c
        type:
          type: string
          description: 工具调用类型，例如 "web_search_call"。
          example: web_search_call
        status:
          type: string
          description: 工具调用的状态。
          example: completed
    FileSearchCall:
      type: object
      properties:
        id:
          type: string
          description: 工具调用的唯一标识符。
          example: fs_67ccf4c63cd08190887ef6464ba5681609504fb6872380d7
        type:
          type: string
          description: 工具调用类型，例如 "file_search_call"。
          example: file_search_call
        status:
          type: string
          description: 工具调用的状态。
          example: completed
        queries:
          type: array
          description: 文件搜索的查询列表。
          items:
            type: string
          example:
            - attributes of an ancient brown dragon
        results:
          type: object
          description: 文件搜索结果（如果有）。
          nullable: true
    FunctionCall:
      type: object
      properties:
        id:
          type: string
          description: 工具调用的唯一标识符。
          example: fc_67ca09c6bedc8190a7abfec07b1a1332096610f474011cc0
        type:
          type: string
          description: 工具调用类型，固定为 "function_call"。
          example: function_call
        call_id:
          type: string
          description: 函数调用的唯一标识符。
          example: call_unLAR8MvFNptuiZK6K6HCy5k
        name:
          type: string
          description: 调用的函数名称。
          example: get_current_weather
        arguments:
          type: string
          description: 函数调用的参数，JSON 字符串格式。
          example: '{"location":"Boston, MA","unit":"celsius"}'
        status:
          type: string
          description: 工具调用的状态。
          example: completed
    ChatCompletionRequest:
      type: object
      required:
        - model
        - messages
      properties:
        model:
          type: string
          description: 用于生成响应的模型 ID（例如 gpt-4.1）。
          example: gpt-4.1
        messages:
          type: array
          description: 消息数组，支持 developer（系统）、user 和 assistant 角色。
          items:
            $ref: '#/components/schemas/ChatMessage'
        store:
          type: boolean
          description: 是否存储响应。
          example: true
      additionalProperties: false
    ChatMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [developer, user, assistant]
          description: 消息角色，developer 为系统消息。
          example: developer
        content:
          type: string
          description: 消息内容。
          example: 你是一位得力的助手。
      additionalProperties: false
    ChatCompletion:
      type: object
      properties:
        id:
          type: string
          description: 聊天完成的唯一标识符。
          example: chatcmpl-B9MBs8CjcvOU2jLn4n570S5qMJKcT
        object:
          type: string
          description: 对象类型，始终为 "chat.completion"。
          example: chat.completion
        created:
          type: integer
          description: 响应创建时的 Unix 时间戳（秒）。
          example: 1741569952
        model:
          type: string
          description: 用于生成响应的模型。
          example: gpt-4.1-2025-04-14
        choices:
          type: array
          description: 生成的选择数组。
          items:
            $ref: '#/components/schemas/ChatChoice'
        usage:
          type: object
          description: 令牌使用详情。
          properties:
            prompt_tokens:
              type: integer
              example: 19
            completion_tokens:
              type: integer
              example: 10
            total_tokens:
              type: integer
              example: 29
            prompt_tokens_details:
              type: object
              properties:
                cached_tokens:
                  type: integer
                  example: 0
                audio_tokens:
                  type: integer
                  example: 0
            completion_tokens_details:
              type: object
              properties:
                reasoning_tokens:
                  type: integer
                  example: 0
                audio_tokens:
                  type: integer
                  example: 0
                accepted_prediction_tokens:
                  type: integer
                  example: 0
                rejected_prediction_tokens:
                  type: integer
                  example: 0
        service_tier:
          type: string
          description: 服务层级。
          example: default
    ChatChoice:
      type: object
      properties:
        index:
          type: integer
          description: 选择索引。
          example: 0
        message:
          $ref: '#/components/schemas/ChatMessageResponse'
        logprobs:
          type: object
          nullable: true
        finish_reason:
          type: string
          enum: [stop, length, tool_calls]
          description: 完成原因。
          example: stop
    ChatMessageResponse:
      type: object
      properties:
        role:
          type: string
          description: 消息角色，固定为 "assistant"。
          example: assistant
        content:
          type: string
          description: 助手生成的响应内容。
          example: 你好！今天我能帮您什么？
        refusal:
          type: object
          nullable: true
          description: ilier to reject the request (if applicable).
        annotations:
          type: array
          description: Annotations for the content (if any).
          items:
            type: object
          example: []
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: 错误描述。
            type:
              type: string
              description: 错误类型。
            code:
              type: string
              description: 错误代码（如果适用）。
