openapi: 3.1.0
info:
  title: LLMHub API
  version: 2025-01-01
  description: |
    本文件基于原始 openapi.yaml 转换，增加了 Mintlify 友好的 `x-codeSamples`，
    并在 responses 中添加了 `x-label` 来匹配请求示例与响应示例。
    对于流式响应 (text/event-stream)，提供了 NDJSON / SSE 格式示例。

paths:
  /audio/speech:
    post:
      operationId: createSpeech
      tags:
        - Audio
      summary: Create speech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeechRequest'
      x-codeSamples:
        - lang: curl
          label: 默认请求
          source: |
            curl https://api.llmhub.com.cn/v1/audio/speech \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{"text":"Hello world","voice":"alloy"}'
        - lang: javascript
          label: 默认请求
          source: |
            fetch("https://api.llmhub.com.cn/v1/audio/speech", {
              method: "POST",
              headers: {
                "Authorization": "Bearer $LLMHub_API_KEY",
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ text: "Hello world", voice: "alloy" })
            })
              .then(r => r.arrayBuffer())
              .then(console.log)
        - lang: curl
          label: 流式响应
          source: |
            curl -N https://api.llmhub.com.cn/v1/audio/speech \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -H "Accept: text/event-stream" \
              -H "Content-Type: application/json" \
              -d '{"text":"Hello world","voice":"alloy"}'
        - lang: javascript
          label: 流式响应
          source: |
            const es = new EventSource("https://api.llmhub.com.cn/v1/audio/speech");
            es.onmessage = (e) => console.log("message:", e.data);
            es.onerror = (e) => console.error(e);
        - lang: javascript
          label: 流式响应（fetch）
          source: |
            fetch("https://api.llmhub.com.cn/v1/audio/speech", {
              method: "POST",
              headers: {
                "Authorization": "Bearer $LLMHub_API_KEY",
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ text: "Hello world", voice: "alloy" })
            }).then(res => {
              const reader = res.body.getReader();
              const decoder = new TextDecoder();
              function read() {
                return reader.read().then(({done, value}) => {
                  if (done) return;
                  console.log(decoder.decode(value));
                  return read();
                });
              }
              return read();
            }).catch(console.error);
      responses:
        '200':
          description: OK
          headers:
            X-RateLimit-Remaining:
              description: remaining requests
              schema:
                type: integer
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
              examples:
                default-audio:
                  summary: 默认示例响应
                  value: "（此处为示例音频文件内容，二进制省略）"
                  x-label: 默认请求
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateSpeechResponseStreamEvent'
              examples:
                stream-example:
                  summary: 流式响应示例（event-stream/NDJSON）
                  value: |
                    data: {"id":"1","text":"chunk1"}\n\n
                    data: {"id":"2","text":"chunk2"}\n\n
                    data: {"id":"3","text":"chunk3"}\n\n
                  x-label: 流式响应

components:
  schemas:
    CreateSpeechRequest:
      type: object
      properties:
        text:
          type: string
        voice:
          type: string
    CreateSpeechResponseStreamEvent:
      type: object
      properties:
        id:
          type: string
        audio_chunk:
          type: string
