# OpenAPI 规范版本
openapi: 3.1.0

# API 的元数据信息
info:
  title: OpenAI API (Mintlify-Compatible)
  version: '1.0.0'
  description: |
    这是根据提供的 openai.yaml 文件片段生成的完整 OpenAPI 3.1.0 规范。
    它专门为 Mintlify 文档进行了优化，使用了 `x-codeSamples` 扩展来展示代码示例，
    并实现了请求与响应示例的同步联动。

# API 服务器信息
servers:
  - url: https://api.llmhub.com.cn/v1
    description: 主 API 服务器

# 全局安全要求，适用于所有 API 端点
security:
  - bearerAuth: []

# API 端点（路径）定义
paths:
  /audio/speech:
    post:
      operationId: createSpeech
      tags:
        - Audio
      summary: 创建语音
      description: 根据输入的文本生成音频。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeechRequest'
      responses:
        '200':
          description: OK
          headers:
            Transfer-Encoding:
              schema:
                type: string
              description: chunked
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateSpeechResponseStreamEvent'
      x-codeSamples:
        - lang: cURL
          label: '默认请求'
          source: |
            curl https://api.llmhub.com.cn/v1/audio/speech \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "model": "gpt-4o-mini-tts",
                "input": "The quick brown fox jumped over the lazy dog.",
                "voice": "alloy"
              }' \
              --output speech.mp3
        - lang: cURL
          label: 'SSE 流格式'
          source: |
            curl https://api.llmhub.com.cn/v1/audio/speech \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "model": "gpt-4o-mini-tts",
                "input": "The quick brown fox jumped over the lazy dog.",
                "voice": "alloy",
                "stream_format": "sse"
              }'

  /audio/transcriptions:
    post:
      operationId: createTranscription
      tags:
        - Audio
      summary: 创建转录
      description: 将音频转录为输入语言的文本。
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranscriptionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CreateTranscriptionResponseJson'
                  - $ref: '#/components/schemas/CreateTranscriptionResponseVerboseJson'
              examples:
                '默认请求':
                  summary: '默认响应'
                  value:
                    text: "Imagine the wildest idea that you've ever had, and you're curious about how it might scale to something that's a 100, a 1,000 times bigger. This is a place where you can get to do that."
                '带 Logprobs 的请求':
                  summary: '带 Logprobs 的响应'
                  value:
                    text: "Hey, my knee is hurting and I want to see the doctor tomorrow ideally."
                    logprobs:
                      - token: "Hey"
                        logprob: -1.0415299
                '带词语时间戳的请求':
                  summary: '带词语时间戳的响应'
                  value:
                    words:
                      - word: "The"
                        start: 0.0
                        end: 0.24
                '带分段时间戳的请求':
                  summary: '带分段时间戳的响应'
                  value:
                    segments:
                      - id: 0
                        start: 0.0
                        end: 3.32
                        text: " The beach was a popular spot on a hot summer day."
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateTranscriptionResponseStreamEvent'
              examples:
                '流式请求':
                  summary: '流式响应'
                  value: |
                    data: {"type":"transcript.text.delta","delta":"I"}
                    data: {"type":"transcript.text.done","text":"I see skies of blue..."}
      x-codeSamples:
        - lang: cURL
          label: '默认请求'
          source: |
            curl https://api.llmhub.com.cn/v1/audio/transcriptions \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F file="@/path/to/file/audio.mp3" \
              -F model="gpt-4o-transcribe"
        - lang: cURL
          label: '流式请求'
          source: |
            curl https://api.llmhub.com.cn/v1/audio/transcriptions \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F file="@/path/to/file/audio.mp3" \
              -F model="gpt-4o-mini-transcribe" \
              -F stream=true
        - lang: cURL
          label: '带 Logprobs 的请求'
          source: |
            curl https://api.llmhub.com.cn/v1/audio/transcriptions \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F file="@/path/to/file/audio.mp3" \
              -F "include[]=logprobs" \
              -F model="gpt-4o-transcribe" \
              -F response_format="json"
        - lang: cURL
          label: '带词语时间戳的请求'
          source: |
            curl https://api.llmhub.com.cn/v1/audio/transcriptions \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F file="@/path/to/file/audio.mp3" \
              -F "timestamp_granularities[]=word" \
              -F model="whisper-1" \
              -F response_format="verbose_json"
        - lang: cURL
          label: '带分段时间戳的请求'
          source: |
            curl https://api.llmhub.com.cn/v1/audio/transcriptions \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F file="@/path/to/file/audio.mp3" \
              -F "timestamp_granularities[]=segment" \
              -F model="whisper-1" \
              -F response_format="verbose_json"

  /audio/translations:
    post:
      operationId: createTranslation
      tags:
        - Audio
      summary: 创建翻译
      description: 将音频翻译成英语。
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CreateTranslationResponseJson'
                  - $ref: '#/components/schemas/CreateTranslationResponseVerboseJson'
              examples:
                '默认请求':
                  summary: '默认响应'
                  value:
                    text: "Hello, my name is Wolfgang and I come from Germany. Where are you heading today?"
      x-codeSamples:
        - lang: cURL
          label: '默认请求'
          source: |
            curl https://api.llmhub.com.cn/v1/audio/translations \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F file="@/path/to/file/german.m4a" \
              -F model="whisper-1"

  /images/edits:
    post:
      operationId: createImageEdit
      tags:
        - Images
      summary: 创建图像编辑
      description: |
        根据一个或多个源图像和提示创建编辑或扩展后的图像。此端点仅支持 `gpt-image-1` 和 `dall-e-2`。
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageEditRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ImageEditStreamEvent'
              examples:
                '流式请求':
                  summary: '流式响应'
                  value: |
                    event: image_edit.partial_image
                    data: {"type":"image_edit.partial_image","b64_json":"...","partial_image_index":0}
                    event: image_edit.completed
                    data: {"type":"image_edit.completed","b64_json":"..."}
      x-codeSamples:
        - lang: cURL
          label: '编辑图像'
          source: |
            curl -s -D >(grep -i x-request-id >&2) \
              -o >(jq -r '.data[0].b64_json' | base64 --decode > gift-basket.png) \
              -X POST "https://api.llmhub.com.cn/v1/images/edits" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -F "model=gpt-image-1" \
              -F "image[]=@body-lotion.png" \
              -F "image[]=@bath-bomb.png" \
              -F "image[]=@incense-kit.png" \
              -F "image[]=@soap.png" \
              -F 'prompt=Create a lovely gift basket with these four items in it'
        - lang: cURL
          label: '流式请求'
          source: |
            curl -s -N -X POST "https://api.llmhub.com.cn/v1/images/edits" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -F "model=gpt-image-1" \
              -F "image[]=@body-lotion.png" \
              -F "image[]=@bath-bomb.png" \
              -F "image[]=@incense-kit.png" \
              -F "image[]=@soap.png" \
              -F 'prompt=Create a lovely gift basket with these four items in it' \
              -F "stream=true"

  /images/generations:
    post:
      operationId: createImage
      tags:
        - Images
      summary: 创建图像
      description: |
        根据提示创建图像。 [了解更多](https://platform.openai.com/docs/guides/images)。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
              examples:
                '生成图像':
                  summary: '生成图像响应'
                  value:
                    created: 1713833628
                    data:
                      - b64_json: "..."
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ImageGenStreamEvent'
              examples:
                '流式请求':
                  summary: '流式响应'
                  value: |
                    event: image_generation.partial_image
                    data: {"type":"image_generation.partial_image","b64_json":"..."}
                    event: image_generation.completed
                    data: {"type":"image_generation.completed","b64_json":"..."}
      x-codeSamples:
        - lang: cURL
          label: '生成图像'
          source: |
            curl https://api.llmhub.com.cn/v1/images/generations \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -d '{
                "model": "gpt-image-1",
                "prompt": "A cute baby sea otter",
                "n": 1,
                "size": "1024x1024"
              }'
        - lang: cURL
          label: '流式请求'
          source: |
            curl https://api.llmhub.com.cn/v1/images/generations \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -d '{
                "model": "gpt-image-1",
                "prompt": "A cute baby sea otter",
                "n": 1,
                "size": "1024x1024",
                "stream": true
              }' \
              --no-buffer

  /images/variations:
    post:
      operationId: createImageVariation
      tags:
        - Images
      summary: 创建图像变体
      description: 创建给定图像的变体。此端点仅支持 `dall-e-2`。
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageVariationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
              examples:
                '默认请求':
                  summary: '默认响应'
                  value:
                    created: 1589478378
                    data:
                      - url: "https://..."
                      - url: "https://..."
      x-codeSamples:
        - lang: cURL
          label: '默认请求'
          source: |
            curl https://api.llmhub.com.cn/v1/images/variations \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -F image="@otter.png" \
              -F n=2 \
              -F size="1024x1024"

  /responses:
    post:
      operationId: createResponse
      tags:
        - Responses
      summary: 创建模型响应
      description: |
        OpenAI 最先进的模型响应生成接口。支持文本和图像输入以及文本输出。使用先前响应的输出作为输入，与模型创建有状态的交互。使用内置工具扩展模型的功能，用于文件搜索、网页搜索、计算机使用等。允许模型通过函数调用访问外部系统和数据。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResponse'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                '文本输入':
                  summary: '文本输入响应'
                  value:
                    id: "resp_67ccd2bed1ec8190b14f964abc0542670bb6a6b452d3795b"
                    object: "response"
                    created_at: 1741476542
                    status: "completed"
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: "gpt-4.1-2025-04-14"
                    output:
                      - type: "message"
                        id: "msg_67ccd2bf17f0819081ff3bb2cf6508e60bb6a6b452d3795b"
                        status: "completed"
                        role: "assistant"
                        content:
                          - type: "output_text"
                            text: "In a peaceful grove beneath a silver moon, a unicorn named Lumina discovered a hidden pool that reflected the stars. As she dipped her horn into the water, the pool began to shimmer, revealing a pathway to a magical realm of endless night skies. Filled with wonder, Lumina whispered a wish for all who dream to find their own hidden magic, and as she glanced back, her hoofprints sparkled like stardust."
                            annotations: [ ]
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: "text"
                    tool_choice: "auto"
                    tools: [ ]
                    top_p: 1.0
                    truncation: "disabled"
                    usage:
                      input_tokens: 36
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 87
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 123
                    user: null
                    metadata: { }
                '图像输入':
                  summary: '图像输入响应'
                  value:
                    id: "resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41"
                '文件输入':
                  summary: '文件输入响应'
                  value:
                    id: "resp_686eef60237881a2bd1180bb8b13de430e34c516d176ff86"
                '网页搜索':
                  summary: '网页搜索响应'
                  value:
                    id: "resp_67ccf18ef5fc8190b16dbee19bc54e5f087bb177ab789d5c"
                '文件搜索':
                  summary: '文件搜索响应'
                  value:
                    id: "resp_67ccf4c55fc48190b71bd0463ad3306d09504fb6872380d7"
                '函数调用':
                  summary: '函数调用响应'
                  value:
                    id: "resp_67ca09c5efe0819096d0511c92b8c890096610f474011cc0"
                '带推理的请求':
                  summary: '带推理的响应'
                  value:
                    id: "resp_67ccd7eca01881908ff0b5146584e408072912b2993db808"
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ResponseStreamEvent'
              examples:
                '流式请求':
                  summary: '流式响应'
                  value: |
                    event: response.created
                    data: {"type":"response.created","response":{}}
                    event: response.completed
                    data: {"type":"response.completed","response":{}}
      x-codeSamples:
        - lang: cURL
          label: '文本输入'
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": "Tell me a three sentence bedtime story about a unicorn."
              }'
        - lang: cURL
          label: '图像输入'
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": [
                  {
                    "role": "user",
                    "content": [
                      {"type": "input_text", "text": "what is in this image?"},
                      {
                        "type": "input_image",
                        "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                      }
                    ]
                  }
                ]
              }'
        - lang: cURL
          label: '文件输入'
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": [
                  {
                    "role": "user",
                    "content": [
                      {"type": "input_text", "text": "what is in this file?"},
                      {
                        "type": "input_file",
                        "file_url": "https://www.berkshirehathaway.com/letters/2024ltr.pdf"
                      }
                    ]
                  }
                ]
              }'
        - lang: cURL
          label: '网页搜索'
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "tools": [{ "type": "web_search_preview" }],
                "input": "What was a positive news story from today?"
              }'
        - lang: cURL
          label: '文件搜索'
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "tools": [{
                  "type": "file_search",
                  "vector_store_ids": ["vs_1234567890"],
                  "max_num_results": 20
                }],
                "input": "What are the attributes of an ancient brown dragon?"
              }'
        - lang: cURL
          label: '流式请求'
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "instructions": "You are a helpful assistant.",
                "input": "Hello!",
                "stream": true
              }'
        - lang: cURL
          label: '函数调用'
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": "What is the weather like in Boston today?",
                "tools": [
                  {
                    "type": "function",
                    "name": "get_current_weather",
                    "description": "Get the current weather in a given location",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "The city and state, e.g. San Francisco, CA"
                        },
                        "unit": {
                          "type": "string",
                          "enum": ["celsius", "fahrenheit"]
                        }
                      },
                      "required": ["location", "unit"]
                    }
                  }
                ],
                "tool_choice": "auto"
              }'
        - lang: cURL
          label: '带推理的请求'
          source: |
            curl https://api.llmhub.com.cn/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $LLMHub_API_KEY" \
              -d '{
                "model": "o3-mini",
                "input": "How much wood would a woodchuck chuck?",
                "reasoning": {
                  "effort": "high"
                }
              }'

# 可重用的组件定义
components:
  # 安全方案定义
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: '在请求头中输入 Bearer {token}。'

  # Schema 定义 (占位符)
  schemas:
    CreateSpeechRequest: { type: object }
    CreateSpeechResponseStreamEvent: { type: object }
    CreateTranscriptionRequest: { type: object }
    CreateTranscriptionResponseJson: { type: object }
    CreateTranscriptionResponseVerboseJson: { type: object }
    CreateTranscriptionResponseStreamEvent: { type: object }
    CreateTranslationRequest: { type: object }
    CreateTranslationResponseJson: { type: object }
    CreateTranslationResponseVerboseJson: { type: object }
    CreateImageEditRequest: { type: object }
    ImagesResponse: { type: object }
    ImageEditStreamEvent: { type: object }
    CreateImageRequest: { type: object }
    ImageGenStreamEvent: { type: object }
    CreateImageVariationRequest: { type: object }
    CreateResponse: { type: object }
    Response: { type: object }
    ResponseStreamEvent: { type: object }
