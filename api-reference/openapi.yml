openapi: 3.1.0
info:
  title: LLMHub API
  description: |
    LLMHub API 允许您与先进的语言模型进行交互，以生成文本、执行指令等。
    此文档详细描述了用于创建流式响应的端点。
  version: v1
servers:
  - url: https://api.llmhub.com.cn/v1
    description: LLMHub 生产服务器

# 1. 安全方案定义
# 我们首先在 'components' 中定义 API 所使用的认证方式。
# 根据 curl 命令中的 -H "Authorization: Bearer $LLMHub_API_KEY"，
# 我们可以确定认证方式是 HTTP Bearer Token。
components:
  securitySchemes:
    LLMHubAuth:
      type: http
      scheme: bearer
      bearerFormat: API-KEY
      description: |
        使用您的 LLMHub API 密钥进行认证。
        您需要在 HTTP 请求头中提供一个 `Authorization` 字段，其值为 `Bearer YOUR_API_KEY`。

  # 2. 组件化Schema定义
  # 为了保持规范的整洁和可维护性，我们将所有的数据模型（schemas）集中定义在 'components' 中。
  # 这样做可以方便地在多个地方复用这些模型。
  schemas:
    # 请求体 Schema
    CreateResponseRequest:
      type: object
      title: Create Response Request
      description: 创建一个新响应的请求体。
      properties:
        model:
          type: string
          description: 用于生成响应的模型ID。
          example: "gpt-4.1"
        instructions:
          type: string
          description: 对模型的系统级指令，用于指导其行为。
          example: "You are a helpful assistant."
        input:
          type: string
          description: 提供给模型的主要输入内容。
          example: "Hello!"
        stream:
          type: boolean
          description: |
            如果设置为 `true`，API将以 Server-Sent Events (SSE) 的形式流式返回响应。
            如果为 `false` 或未提供，API将在响应完全生成后一次性返回。
          default: false
          example: true
      required:
        - model
        - input

    # -----------------------------------------------------
    # 响应体与事件的 Schema
    # 核心在于如何描述一个 SSE 流。OpenAPI 标准的做法是：
    # 1. 将响应的 Content-Type 设置为 `text/event-stream`。
    # 2. 定义一个 schema 来描述流中 `data` 字段可能出现的各种JSON对象结构。
    # 3. 使用 `oneOf` 和 `discriminator` 来清晰地定义不同类型的事件。
    #    'discriminator' 会根据 'type' 字段的值来确定具体是哪一个事件模型。
    # -----------------------------------------------------

    StreamEvent:
      title: Stream Event
      description: SSE 流中的一个事件数据对象。
      oneOf:
        - $ref: '#/components/schemas/ResponseCreatedEvent'
        - $ref: '#/components/schemas/ResponseInProgressEvent'
        - $ref: '#/components/schemas/ResponseOutputItemAddedEvent'
        - $ref: '#/components/schemas/ResponseContentPartAddedEvent'
        - $ref: '#/components/schemas/ResponseOutputTextDeltaEvent'
        - $ref: '#/components/schemas/ResponseOutputTextDoneEvent'
        - $ref: '#/components/schemas/ResponseContentPartDoneEvent'
        - $ref: '#/components/schemas/ResponseOutputItemDoneEvent'
        - $ref: '#/components/schemas/ResponseCompletedEvent'
      discriminator:
        propertyName: type
        mapping:
          response.created: '#/components/schemas/ResponseCreatedEvent'
          response.in_progress: '#/components/schemas/ResponseInProgressEvent'
          response.output_item.added: '#/components/schemas/ResponseOutputItemAddedEvent'
          response.content_part.added: '#/components/schemas/ResponseContentPartAddedEvent'
          response.output_text.delta: '#/components/schemas/ResponseOutputTextDeltaEvent'
          response.output_text.done: '#/components/schemas/ResponseOutputTextDoneEvent'
          response.content_part.done: '#/components/schemas/ResponseContentPartDoneEvent'
          response.output_item.done: '#/components/schemas/ResponseOutputItemDoneEvent'
          response.completed: '#/components/schemas/ResponseCompletedEvent'

    # 为每个事件类型定义详细的 Schema
    # 我们从提供的 SSE 流中提取每个事件的 `data` 部分，并为其创建精确的 Schema。

    # 通用响应对象，被多个事件引用
    ResponseObject:
      type: object
      properties:
        id:
          type: string
          example: "resp_67c9fdcecf488190bdd9a0409de3a1ec07b8b0ad4e5eb654"
        object:
          type: string
          enum: [response]
        created_at:
          type: integer
          format: int64
          description: 响应创建的Unix时间戳。
          example: 1741290958
        status:
          type: string
          enum: [in_progress, completed, failed, cancelled]
        # ... 这里可以根据API的完整文档补充其他字段，如 error, instructions, model 等。
        # 为了简洁，此处仅列出示例中出现的关键字段。
        output:
          type: array
          items:
            type: object # 详细结构可以在 ResponseCompletedEvent 中看到
        usage:
          type: object
          nullable: true
          properties:
            input_tokens:
              type: integer
            output_tokens:
              type: integer
            total_tokens:
              type: integer

    ResponseCreatedEvent:
      type: object
      required: [type, response]
      properties:
        type:
          type: string
          enum: [response.created]
        response:
          $ref: '#/components/schemas/ResponseObject'

    ResponseInProgressEvent:
      type: object
      required: [type, response]
      properties:
        type:
          type: string
          enum: [response.in_progress]
        response:
          $ref: '#/components/schemas/ResponseObject'

    ResponseOutputItemAddedEvent:
      type: object
      properties:
        type:
          type: string
          enum: [response.output_item.added]
        output_index:
          type: integer
        item:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            status:
              type: string
            role:
              type: string
            content:
              type: array

    ResponseContentPartAddedEvent:
      type: object
      properties:
        type: { type: string, enum: [response.content_part.added] }
        item_id: { type: string }
        output_index: { type: integer }
        content_index: { type: integer }
        part: { type: object }

    ResponseOutputTextDeltaEvent:
      type: object
      properties:
        type: { type: string, enum: [response.output_text.delta] }
        item_id: { type: string }
        output_index: { type: integer }
        content_index: { type: integer }
        delta: { type: string, description: "本次增量传输的文本内容。" }

    ResponseOutputTextDoneEvent:
      type: object
      properties:
        type: { type: string, enum: [response.output_text.done] }
        item_id: { type: string }
        output_index: { type: integer }
        content_index: { type: integer }
        text: { type: string, description: "完整的文本块内容。" }

    ResponseContentPartDoneEvent:
      type: object
      properties:
        type: { type: string, enum: [response.content_part.done] }
        item_id: { type: string }
        output_index: { type: integer }
        content_index: { type: integer }
        part: { type: object }

    ResponseOutputItemDoneEvent:
      type: object
      properties:
        type: { type: string, enum: [response.output_item.done] }
        output_index: { type: integer }
        item: { type: object }

    ResponseCompletedEvent:
      type: object
      required: [type, response]
      properties:
        type:
          type: string
          enum: [response.completed]
        response:
          # 这是最终的、完整的 Response 对象，其 schema 会比中间状态更详细。
          allOf:
            - $ref: '#/components/schemas/ResponseObject'
            - type: object
              properties:
                status:
                  enum: [completed]
                output:
                  type: array
                  items:
                    type: object
                    properties:
                      id: { type: string }
                      type: { type: string }
                      status: { enum: [completed] }
                      role: { enum: [assistant] }
                      content:
                        type: array
                        items:
                          type: object
                          properties:
                            type: { enum: [output_text] }
                            text: { type: string }
                usage:
                  # 保证 usage 字段在完成时不为 null
                  type: object
                  nullable: false
                  required: [input_tokens, output_tokens, total_tokens]

# 3. 路径和操作定义
# 这是 API 的核心部分，我们在这里定义 `/responses` 路径下的 POST 操作。
paths:
  /responses:
    post:
      summary: 创建一个响应
      description: |
        向指定的模型发送输入，以生成一个响应。
        通过设置 `stream: true`，可以接收一个 Server-Sent Events (SSE) 流，
        实时获取响应的生成过程。
      operationId: createResponse
      tags:
        - Responses
      # 4. 引用安全方案
      # 这里我们引用之前定义的 LLMHubAuth，表示此端点需要 Bearer Token 认证。
      security:
        - LLMHubAuth: []
      requestBody:
        description: 请求参数
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResponseRequest'
      responses:
        # 5. 响应定义
        # 这里是关键，我们定义了 HTTP 200 成功响应。
        # Content-Type 被明确指定为 'text/event-stream'。
        # 其 schema 指向我们定义的 StreamEvent，它通过 `oneOf` 和 `discriminator`
        # 描述了流中可能出现的每一种事件结构。
        '200':
          description: 成功。以 Server-Sent Events (SSE) 流的形式返回响应。
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/StreamEvent'
              example: |
                event: response.created
                data: {"type":"response.created","response":{...}}

                event: response.in_progress
                data: {"type":"response.in_progress","response":{...}}

                event: response.output_text.delta
                data: {"type":"response.output_text.delta", "delta":"Hello"}

                ...

                event: response.completed
                data: {"type":"response.completed","response":{...}}

        '400':
          description: 错误的请求（例如，无效的参数）。
        '401':
          description: 未经授权（例如，无效的API密钥）。
