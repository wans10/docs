openapi: 3.1.0
info:
  title: OpenAI Responses API (Mintlify-friendly OpenAPI 3.1.0)
  version: 1.0.0
  description: |
    This OpenAPI 3.1.0 specification models the OpenAI Responses API in a format
    compatible with documentation generators such as Mintlify, Swagger UI or Redoc.
    It includes example requests (curl / python / javascript / csharp) and the
    most important request/response schemas to render interactive docs.

servers:
  - url: https://api.openai.com
    description: OpenAI public API

security:
  - bearerAuth: []

paths:
  /v1/responses:
    post:
      summary: Create a response from a model
      operationId: createResponse
      tags:
        - Responses
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponsesCreateRequest'
            examples:
              simple:
                summary: Minimal example
                value:
                  model: gpt-4o-mini
                  input: "Write a haiku about autumn."
              streaming:
                summary: Example with streaming and multi-message input
                value:
                  model: gpt-4.1
                  input:
                    - role: user
                      content: "Summarize the following text: {text}"
                  max_output_tokens: 300
      responses:
        '200':
          description: Successful response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsesCreateResponse'
              examples:
                example-1:
                  summary: Typical JSON response
                  value:
                    id: "resp-12345"
                    object: "response"
                    created: 1700000000
                    model: "gpt-4.1"
                    output:
                      - id: "msg-1"
                        type: "message"
                        role: "assistant"
                        content: "Here is the summarized text..."
        '400':
          description: Bad request
        '401':
          description: Unauthorized - invalid API key
        '429':
          description: Rate limited

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: APIKey

  schemas:
    ResponsesCreateRequest:
      type: object
      required:
        - model
        - input
      properties:
        model:
          type: string
          description: Model ID to use (e.g. gpt-4.1, gpt-4o-mini)
        input:
          description: |
            The input to the model. Can be a single string, an object with role/content,
            or an array of messages for chat-like models.
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Message'
            - type: array
              items:
                $ref: '#/components/schemas/Message'
        max_output_tokens:
          type: integer
          description: Maximum tokens to generate in the output
        temperature:
          type: number
          format: float
          description: Sampling temperature
        top_p:
          type: number
          format: float
          description: Nucleus sampling parameter
        stop:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        stream:
          type: boolean
          description: Whether to use streaming responses (server-sent events)

    Message:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [system, user, assistant]
        content:
          oneOf:
            - type: string
            - type: array
              items:
                type: string

    ResponsesCreateResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
        model:
          type: string
        output:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'

    ResponseMessage:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        role:
          type: string
        content:
          oneOf:
            - type: string
            - type: array
              items:
                type: string

  examples:
    ResponsesCreateExample:
      summary: Full request example
      value:
        model: gpt-4.1
        input:
          - role: user
            content: "Translate the following English text to French: 'Hello, world.'"
        temperature: 0.2
        max_output_tokens: 100

x-codeSamples:
  - lang: curl
    label: cURL
    source: |
      curl https://api.openai.com/v1/responses \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d '{
          "model": "gpt-4.1",
          "input": "Write a short summary of the features of OpenAI Responses API."
        }'

  - lang: python
    label: Python (requests)
    source: |
      import os
      import requests

      api_key = os.environ.get('OPENAI_API_KEY')
      url = 'https://api.openai.com/v1/responses'
      headers = {
          'Content-Type': 'application/json',
          'Authorization': f'Bearer {api_key}',
      }
      payload = {
          'model': 'gpt-4.1',
          'input': 'Write a short summary of the features of OpenAI Responses API.'
      }
      r = requests.post(url, headers=headers, json=payload)
      r.raise_for_status()
      print(r.json())

  - lang: javascript
    label: JavaScript (fetch)
    source: |
      const apiKey = process.env.OPENAI_API_KEY;
      const res = await fetch('https://api.openai.com/v1/responses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4.1',
          input: 'Write a short summary of the features of OpenAI Responses API.'
        }),
      });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json();
      console.log(data);

  - lang: csharp
    label: C# (.NET HttpClient)
    source: |
      using System;
      using System.Net.Http;
      using System.Net.Http.Headers;
      using System.Text;
      using System.Threading.Tasks;

      var apiKey = Environment.GetEnvironmentVariable("OPENAI_API_KEY");
      using var client = new HttpClient();
      client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);
      var payload = new StringContent(
        "{\"model\":\"gpt-4.1\",\"input\":\"Write a short summary of the features of OpenAI Responses API.\"}",
        Encoding.UTF8,
        "application/json"
      );
      var resp = await client.PostAsync("https://api.openai.com/v1/responses", payload);
      resp.EnsureSuccessStatusCode();
      var body = await resp.Content.ReadAsStringAsync();
      Console.WriteLine(body);
