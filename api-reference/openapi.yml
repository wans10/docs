openapi: 3.1.0
info:
  title: OpenAI Responses API
  description: 使用 OpenAI 的语言模型生成响应的 API，支持文本、图像、文件、网络搜索和文件搜索输入。
  version: 1.0.0
servers:
  - url: https://api.openai.com/v1
    description: OpenAI API 生产服务器
paths:
  /responses:
    post:
      operationId: createResponse
      summary: 创建使用指定模型的响应
      description: 根据提供的模型和输入（支持文本、消息数组包含文本、图像、文件，或工具调用如网络搜索和文件搜索）生成文本响应。需要 API 密钥进行身份验证。
      tags:
        - Responses
      security:
        - bearerAuth: []
      x-codeSamples:
        - lang: cURL
          label: 文本输入示例
          source: |
            curl https://api.openai.com/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": "Tell me a three sentence bedtime story about a unicorn."
              }'
        - lang: cURL
          label: 图像输入示例
          source: |
            curl https://api.openai.com/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": [
                  {
                    "role": "user",
                    "content": [
                      {"type": "input_text", "text": "what is in this image?"},
                      {
                        "type": "input_image",
                        "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                      }
                    ]
                  }
                ]
              }'
        - lang: cURL
          label: 文件输入示例
          source: |
            curl https://api.openai.com/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "input": [
                  {
                    "role": "user",
                    "content": [
                      {"type": "input_text", "text": "what is in this file?"},
                      {
                        "type": "input_file",
                        "file_url": "https://www.berkshirehathaway.com/letters/2024ltr.pdf"
                      }
                    ]
                  }
                ]
              }'
        - lang: cURL
          label: 网络搜索示例
          source: |
            curl https://api.openai.com/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "tools": [{ "type": "web_search_preview" }],
                "input": "What was a positive news story from today?"
              }'
        - lang: cURL
          label: 文件搜索示例
          source: |
            curl https://api.openai.com/v1/responses \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "tools": [{
                  "type": "file_search",
                  "vector_store_ids": ["vs_1234567890"],
                  "max_num_results": 20
                }],
                "input": "What are the attributes of an ancient brown dragon?"
              }'
        - lang: JavaScript
          label: 文本输入示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                input: "Tell me a three sentence bedtime story about a unicorn."
            });

            console.log(response);
        - lang: JavaScript
          label: 图像输入示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                input: [
                    {
                        role: "user",
                        content: [
                            { type: "input_text", text: "what is in this image?" },
                            {
                                type: "input_image",
                                image_url:
                                    "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                            },
                        ],
                    },
                ],
            });

            console.log(response);
        - lang: JavaScript
          label: 文件输入示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                input: [
                    {
                        role: "user",
                        content: [
                            { type: "input_text", text: "what is in this file?" },
                            {
                                type: "input_file",
                                file_url: "https://www.berkshirehathaway.com/letters/2024ltr.pdf",
                            },
                        ],
                    },
                ],
            });

            console.log(response);
        - lang: JavaScript
          label: 网络搜索示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                tools: [{ type: "web_search_preview" }],
                input: "What was a positive news story from today?",
            });

            console.log(response);
        - lang: JavaScript
          label: 文件搜索示例
          source: |
            import OpenAI from "openai";

            const openai = new OpenAI();

            const response = await openai.responses.create({
                model: "gpt-4.1",
                tools: [{
                    type: "file_search",
                    vector_store_ids: ["vs_1234567890"],
                    max_num_results: 20
                }],
                input: "What are the attributes of an ancient brown dragon?",
            });

            console.log(response);
        - lang: Python
          label: 文本输入示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
              model="gpt-4.1",
              input="Tell me a three sentence bedtime story about a unicorn."
            )

            print(response)
        - lang: Python
          label: 图像输入示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
                model="gpt-4.1",
                input=[
                    {
                        "role": "user",
                        "content": [
                            { "type": "input_text", "text": "what is in this image?" },
                            {
                                "type": "input_image",
                                "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                            }
                        ]
                    }
                ]
            )

            print(response)
        - lang: Python
          label: 文件输入示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
                model="gpt-4.1",
                input=[
                    {
                        "role": "user",
                        "content": [
                            { "type": "input_text", "text": "what is in this file?" },
                            {
                                "type": "input_file",
                                "file_url": "https://www.berkshirehathaway.com/letters/2024ltr.pdf"
                            }
                        ]
                    }
                ]
            )

            print(response)
        - lang: Python
          label: 网络搜索示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
                model="gpt-4.1",
                tools=[{ "type": "web_search_preview" }],
                input="What was a positive news story from today?",
            )

            print(response)
        - lang: Python
          label: 文件搜索示例
          source: |
            from openai import OpenAI

            client = OpenAI()

            response = client.responses.create(
                model="gpt-4.1",
                tools=[{
                    "type": "file_search",
                    "vector_store_ids": ["vs_1234567890"],
                    "max_num_results": 20
                }],
                input="What are the attributes of an ancient brown dragon?",
            )

            print(response)
        - lang: C#
          label: 文本输入示例
          source: |
            using System;
            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            OpenAIResponse response = client.CreateResponse("Tell me a three sentence bedtime story about a unicorn.");

            Console.WriteLine(response.GetOutputText());
        - lang: C#
          label: 图像输入示例
          source: |
            using System;
            using System.Collections.Generic;
            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            List<ResponseItem> inputItems =
            [
                ResponseItem.CreateUserMessageItem(
                    [
                        ResponseContentPart.CreateInputTextPart("What is in this image?"),
                        ResponseContentPart.CreateInputImagePart(new Uri("https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"))
                    ]
                )
            ];

            OpenAIResponse response = client.CreateResponse(inputItems);

            Console.WriteLine(response.GetOutputText());
        - lang: C#
          label: 网络搜索示例
          source: |
            using System;
            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            string userInputText = "What was a positive news story from today?";

            ResponseCreationOptions options = new()
            {
                Tools =
                {
                    ResponseTool.CreateWebSearchTool()
                },
            };

            OpenAIResponse response = client.CreateResponse(userInputText, options);

            Console.WriteLine(response.GetOutputText());
        - lang: C#
          label: 文件搜索示例
          source: |
            using System;
            using OpenAI.Responses;

            OpenAIResponseClient client = new(
                model: "gpt-4.1",
                apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
            );

            string userInputText = "What are the attributes of an ancient brown dragon?";

            ResponseCreationOptions options = new()
            {
                Tools =
                {
                    ResponseTool.CreateFileSearchTool(
                        vectorStoreIds: ["vs_1234567890"],
                        maxResultCount: 20
                    )
                },
            };

            OpenAIResponse response = client.CreateResponse(userInputText, options);

            Console.WriteLine(response.GetOutputText());
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResponseRequest'
            examples:
              bedtimeStory:
                summary: 生成关于独角兽的睡前故事
                value:
                  model: gpt-4.1
                  input: Tell me a three sentence bedtime story about a unicorn.
              imageDescription:
                summary: 描述图像内容
                value:
                  model: gpt-4.1
                  input:
                    - role: user
                      content:
                        - type: input_text
                          text: what is in this image?
                        - type: input_image
                          image_url: https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg
              fileDescription:
                summary: 描述文件内容
                value:
                  model: gpt-4.1
                  input:
                    - role: user
                      content:
                        - type: input_text
                          text: what is in this file?
                        - type: input_file
                          file_url: https://www.berkshirehathaway.com/letters/2024ltr.pdf
              webSearch:
                summary: 使用工具进行网络搜索
                value:
                  model: gpt-4.1
                  tools:
                    - type: web_search_preview
                  input: What was a positive news story from today?
              fileSearch:
                summary: 使用工具进行文件搜索
                value:
                  model: gpt-4.1
                  tools:
                    - type: file_search
                      vector_store_ids:
                        - vs_1234567890
                      max_num_results: 20
                  input: What are the attributes of an ancient brown dragon?
      responses:
        '200':
          description: 成功生成包含文本的响应。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                bedtimeStoryResponse:
                  summary: 独角兽睡前故事的响应
                  value:
                    id: resp_67ccd2bed1ec8190b14f964abc0542670bb6a6b452d3795b
                    object: response
                    created_at: 1741476542
                    status: completed
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - type: message
                        id: msg_67ccd2bf17f0819081ff3bb2cf6508e60bb6a6b452d3795b
                        status: completed
                        role: assistant
                        content:
                          - type: output_text
                            text: 在银色月光下的宁静树林中，一只名叫卢米娜的独角兽发现了一个反射星光的隐秘水池。当她将角浸入水中，水池开始闪烁，揭示出一条通往无尽夜空的神奇路径。卢米娜满怀惊奇，低语了一个愿望，希望所有梦想者都能找到属于自己的魔法，然后回头一看，她的蹄印如星尘般闪耀。
                            annotations: []
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools: []
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 36
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 87
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 123
                    user: null
                    metadata: {}
                imageDescriptionResponse:
                  summary: 图像描述的响应
                  value:
                    id: resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41
                    object: response
                    created_at: 1741476777
                    status: completed
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - type: message
                        id: msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41
                        status: completed
                        role: assistant
                        content:
                          - type: output_text
                            text: 图像展示了一条木制栈道或小径，穿过郁郁葱葱的绿色草地，蓝天下点缀着几朵白云。场景暗示了一个宁静的自然区域，可能是公园或自然保护区。背景中有树木和灌木。
                            annotations: []
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools: []
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 328
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 52
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 380
                    user: null
                    metadata: {}
                fileDescriptionResponse:
                  summary: 文件描述的响应
                  value:
                    id: resp_686eef60237881a2bd1180bb8b13de430e34c516d176ff86
                    object: response
                    created_at: 1752100704
                    status: completed
                    background: false
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    max_tool_calls: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - id: msg_686eef60d3e081a29283bdcbc4322fd90e34c516d176ff86
                        type: message
                        status: completed
                        content:
                          - type: output_text
                            annotations: []
                            logprobs: []
                            text: 该文件似乎包含伯克希尔·哈撒韦公司致股东的信摘录，可能是沃伦·巴菲特撰写的。信中涵盖以下主题：1. **沟通理念**：巴菲特强调对股东透明和坦诚报告错误与成功的重要性。2. **错误与学习**：承认过去在业务评估和管理招聘中的错误，强调及时纠正的重要性。3. **首席执行官继任**：提到格雷格·阿贝尔接任新首席执行官，并继续保持诚实沟通的传统。4. **皮特·利格尔故事**：详细描述收购Forest River及其创始人关系，突出信任和有效的商业决策。5. **2024年业绩**：概述业务表现，特别是在保险和投资活动方面，重点提到GEICO的改进。6. **税收贡献**：讨论对美国财政部的重大税收贡献，归功于股东的再投资。7. **投资策略**：分解伯克希尔在控股子公司和可交易股权中的投资，强调长期持有策略。8. **美国资本主义**：反思美国的经济发展及伯克希尔的角色。9. **财产意外险**：洞察财产/意外保险商业模式及其挑战和优势。10. **日本投资**：关于伯克希尔在日本公司的投资及未来计划的信息。11. **年会**：关于奥马哈即将召开的年会的细节，包括日程变更和新书发布。12. **个人轶事**：关于家庭和互动的轻松故事，展现巴菲特的亲和力。13. **财务表现数据**：比较伯克希尔与标普500的年度表现数据，展示长期的显著收益。总体而言，该信强调伯克希尔·哈撒韦对透明度、投资于其业务和更广泛经济体的承诺，以及强有力的领导和审慎的财务管理。
                        role: assistant
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    service_tier: default
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools: []
                    top_logprobs: 0
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 8438
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 398
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 8836
                    user: null
                    metadata: {}
                webSearchResponse:
                  summary: 工具调用网络搜索的响应
                  value:
                    id: resp_67ccf18ef5fc8190b16dbee19bc54e5f087bb177ab789d5c
                    object: response
                    created_at: 1741484430
                    status: completed
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - type: web_search_call
                        id: ws_67ccf18f64008190a39b619f4c8455ef087bb177ab789d5c
                        status: completed
                      - type: message
                        id: msg_67ccf190ca3881909d433c50b1f6357e087bb177ab789d5c
                        status: completed
                        role: assistant
                        content:
                          - type: output_text
                            text: 截至2025年3月9日，一个值得注意的正面新闻故事是...
                            annotations:
                              - type: url_citation
                                start_index: 442
                                end_index: 557
                                url: https://.../?utm_source=chatgpt.com
                                title: ...
                              - type: url_citation
                                start_index: 962
                                end_index: 1077
                                url: https://.../?utm_source=chatgpt.com
                                title: ...
                              - type: url_citation
                                start_index: 1336
                                end_index: 1451
                                url: https://.../?utm_source=chatgpt.com
                                title: ...
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools:
                      - type: web_search_preview
                        domains: []
                        search_context_size: medium
                        user_location:
                          type: approximate
                          city: null
                          country: US
                          region: null
                          timezone: null
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 328
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 356
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 684
                    user: null
                    metadata: {}
                fileSearchResponse:
                  summary: 工具调用文件搜索的响应
                  value:
                    id: resp_67ccf4c55fc48190b71bd0463ad3306d09504fb6872380d7
                    object: response
                    created_at: 1741485253
                    status: completed
                    error: null
                    incomplete_details: null
                    instructions: null
                    max_output_tokens: null
                    model: gpt-4.1-2025-04-14
                    output:
                      - type: file_search_call
                        id: fs_67ccf4c63cd08190887ef6464ba5681609504fb6872380d7
                        status: completed
                        queries:
                          - attributes of an ancient brown dragon
                        results: null
                      - type: message
                        id: msg_67ccf4c93e5c81909d595b369351a9d309504fb6872380d7
                        status: completed
                        role: assistant
                        content:
                          - type: output_text
                            text: 古老棕龙的属性包括...
                            annotations:
                              - type: file_citation
                                index: 320
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 576
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 815
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 815
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 1030
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 1030
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 1156
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                              - type: file_citation
                                index: 1225
                                file_id: file-4wDz5b167pAf72nx1h9eiN
                                filename: dragons.pdf
                    parallel_tool_calls: true
                    previous_response_id: null
                    reasoning:
                      effort: null
                      summary: null
                    store: true
                    temperature: 1.0
                    text:
                      format:
                        type: text
                    tool_choice: auto
                    tools:
                      - type: file_search
                        filters: null
                        max_num_results: 20
                        ranking_options:
                          ranker: auto
                          score_threshold: 0.0
                        vector_store_ids:
                          - vs_1234567890
                    top_p: 1.0
                    truncation: disabled
                    usage:
                      input_tokens: 18307
                      input_tokens_details:
                        cached_tokens: 0
                      output_tokens: 348
                      output_tokens_details:
                        reasoning_tokens: 0
                      total_tokens: 18655
                    user: null
                    metadata: {}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CreateResponseRequest:
      type: object
      required:
        - model
        - input
      properties:
        model:
          type: string
          description: 用于生成响应的模型 ID（例如 gpt-4.1）。
          example: gpt-4.1
        input:
          oneOf:
            - type: string
              description: 简单的文本输入提示。
              example: What are the attributes of an ancient brown dragon?
            - type: array
              description: 包含用户消息的数组，支持文本、图像或文件输入。
              items:
                $ref: '#/components/schemas/InputMessage'
        tools:
          type: array
          description: 可选的工具列表，例如网络搜索或文件搜索。
          items:
            $ref: '#/components/schemas/Tool'
          example:
            - type: file_search
              vector_store_ids:
                - vs_1234567890
              max_num_results: 20
      additionalProperties: false
    InputMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          description: 消息的角色，例如 "user"。
          example: user
        content:
          type: array
          description: 消息内容，支持文本、图像或文件。
          items:
            oneOf:
              - $ref: '#/components/schemas/InputTextContent'
              - $ref: '#/components/schemas/InputImageContent'
              - $ref: '#/components/schemas/InputFileContent'
    InputTextContent:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          description: 内容类型，固定为 "input_text"。
          example: input_text
        text:
          type: string
          description: 输入的文本内容。
          example: What are the attributes of an ancient brown dragon?
      additionalProperties: false
    InputImageContent:
      type: object
      required:
        - type
        - image_url
      properties:
        type:
          type: string
          description: 内容类型，固定为 "input_image"。
          example: input_image
        image_url:
          type: string
          description: 图像的 URL 地址。
          example: https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg
      additionalProperties: false
    InputFileContent:
      type: object
      required:
        - type
        - file_url
      properties:
        type:
          type: string
          description: 内容类型，固定为 "input_file"。
          example: input_file
        file_url:
          type: string
          description: 文件的 URL 地址。
          example: https://www.berkshirehathaway.com/letters/2024ltr.pdf
      additionalProperties: false
    Tool:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: 工具类型，例如 "web_search_preview" 或 "file_search"。
          example: file_search
        domains:
          type: array
          description: 可选的搜索域名限制（适用于 web_search_preview）。
          items:
            type: string
          example: []
        search_context_size:
          type: string
          description: 搜索上下文大小，例如 "medium"（适用于 web_search_preview）。
          example: medium
        user_location:
          type: object
          description: 用户位置信息（适用于 web_search_preview）。
          properties:
            type:
              type: string
              example: approximate
            city:
              type: string
              nullable: true
            country:
              type: string
              example: US
            region:
              type: string
              nullable: true
            timezone:
              type: string
              nullable: true
        vector_store_ids:
          type: array
          description: 用于文件搜索的向量存储 ID 列表（适用于 file_search）。
          items:
            type: string
          example:
            - vs_1234567890
        max_num_results:
          type: integer
          description: 文件搜索的最大结果数（适用于 file_search）。
          example: 20
        filters:
          type: object
          description: 文件搜索的过滤条件（适用于 file_search）。
          nullable: true
        ranking_options:
          type: object
          description: 文件搜索的排名选项（适用于 file_search）。
          properties:
            ranker:
              type: string
              description: 排名器类型。
              example: auto
            score_threshold:
              type: number
              description: 分数阈值。
              example: 0.0
      additionalProperties: false
    Response:
      type: object
      properties:
        id:
          type: string
          description: 响应的唯一标识符。
          example: resp_67ccf4c55fc48190b71bd0463ad3306d09504fb6872380d7
        object:
          type: string
          description: 对象类型，始终为 "response"。
          example: response
        created_at:
          type: integer
          description: 响应创建时的 Unix 时间戳（秒）。
          example: 1741485253
        status:
          type: string
          description: 响应的状态。
          example: completed
        background:
          type: boolean
          description: 是否为后台任务。
          example: false
        error:
          type: object
          description: 错误详情（如果有）。
          nullable: true
        incomplete_details:
          type: object
          description: 关于不完整响应的详细信息（如果适用）。
          nullable: true
        instructions:
          type: object
          description: 提供的指令（如果有）。
          nullable: true
        max_output_tokens:
          type: integer
          description: 最大输出令牌数（如果指定）。
          nullable: true
        max_tool_calls:
          type: integer
          description: 最大工具调用次数（如果指定）。
          nullable: true
        model:
          type: string
          description: 用于生成响应的模型。
          example: gpt-4.1-2025-04-14
        output:
          type: array
          description: 输出消息或工具调用数组。
          items:
            oneOf:
              - $ref: '#/components/schemas/OutputMessage'
              - $ref: '#/components/schemas/WebSearchCall'
              - $ref: '#/components/schemas/FileSearchCall'
        parallel_tool_calls:
          type: boolean
          description: 是否启用并行工具调用。
          example: true
        previous_response_id:
          type: string
          description: 前一个响应的 ID（如果有）。
          nullable: true
        reasoning:
          type: object
          description: 响应的推理详情。
          properties:
            effort:
              type: string
              nullable: true
            summary:
              type: string
              nullable: true
        service_tier:
          type: string
          description: 服务层级。
          example: default
        store:
          type: boolean
          description: 是否存储响应。
          example: true
        temperature:
          type: number
          description: 采样的温度值。
          example: 1.0
        text:
          type: object
          description: 文本格式详情。
          properties:
            format:
              type: object
              properties:
                type:
                  type: string
                  example: text
        tool_choice:
          type: string
          description: 工具选择策略。
          example: auto
        tools:
          type: array
          description: 使用的工具列表（如果有）。
          items:
            $ref: '#/components/schemas/Tool'
        top_logprobs:
          type: integer
          description: 返回的 top logprobs 数量。
          example: 0
        top_p:
          type: number
          description: Top-p 采样值。
          example: 1.0
        truncation:
          type: string
          description: 截断策略。
          example: disabled
        usage:
          type: object
          description: 令牌使用详情。
          properties:
            input_tokens:
              type: integer
              example: 18307
            input_tokens_details:
              type: object
              properties:
                cached_tokens:
                  type: integer
                  example: 0
            output_tokens:
              type: integer
              example: 348
            output_tokens_details:
              type: object
              properties:
                reasoning_tokens:
                  type: integer
                  example: 0
            total_tokens:
              type: integer
              example: 18655
        user:
          type: object
          description: 用户信息（如果提供）。
          nullable: true
        metadata:
          type: object
          description: 响应的附加元数据。
          example: {}
    OutputMessage:
      type: object
      properties:
        id:
          type: string
          description: 消息的唯一标识符。
          example: msg_67ccf4c93e5c81909d595b369351a9d309504fb6872380d7
        type:
          type: string
          description: 输出消息的类型。
          example: message
        status:
          type: string
          description: 消息的状态。
          example: completed
        role:
          type: string
          description: 消息发送者的角色。
          example: assistant
        content:
          type: array
          description: 消息的内容。
          items:
            type: object
            properties:
              type:
                type: string
                description: 内容的类型。
                example: output_text
              text:
                type: string
                description: 生成的文本内容。
                example: 古老棕龙的属性包括...
              annotations:
                type: array
                description: 内容的注解（如果有）。
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      description: 注解类型，例如 "url_citation" 或 "file_citation"。
                      example: file_citation
                    index:
                      type: integer
                      description: 注解的索引位置。
                      example: 320
                    file_id:
                      type: string
                      description: 引用的文件 ID（适用于 file_citation）。
                      example: file-4wDz5b167pAf72nx1h9eiN
                    filename:
                      type: string
                      description: 引用的文件名（适用于 file_citation）。
                      example: dragons.pdf
                    start_index:
                      type: integer
                      description: 注解起始索引（适用于 url_citation）。
                      example: 442
                    end_index:
                      type: integer
                      description: 注解结束索引（适用于 url_citation）。
                      example: 557
                    url:
                      type: string
                      description: 引用的 URL（适用于 url_citation）。
                      example: https://.../?utm_source=chatgpt.com
                    title:
                      type: string
                      description: 引用标题（适用于 url_citation）。
                      example: ...
              logprobs:
                type: array
                description: 日志概率（如果有）。
                items:
                  type: object
                example: []
    WebSearchCall:
      type: object
      properties:
        id:
          type: string
          description: 工具调用的唯一标识符。
          example: ws_67ccf18f64008190a39b619f4c8455ef087bb177ab789d5c
        type:
          type: string
          description: 工具调用类型，例如 "web_search_call"。
          example: web_search_call
        status:
          type: string
          description: 工具调用的状态。
          example: completed
    FileSearchCall:
      type: object
      properties:
        id:
          type: string
          description: 工具调用的唯一标识符。
          example: fs_67ccf4c63cd08190887ef6464ba5681609504fb6872380d7
        type:
          type: string
          description: 工具调用类型，例如 "file_search_call"。
          example: file_search_call
        status:
          type: string
          description: 工具调用的状态。
          example: completed
        queries:
          type: array
          description: 文件搜索的查询列表。
          items:
            type: string
          example:
            - attributes of an ancient brown dragon
        results:
          type: object
          description: 文件搜索结果（如果有）。
          nullable: true
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: 错误描述。
            type:
              type: string
              description: 错误类型。
            code:
              type: string
              description: 错误代码（如果适用）。